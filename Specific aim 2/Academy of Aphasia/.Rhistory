melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
geom_text(aes(Var2, Var1, label = value), color = "black", size =4) +
ggtitle("DR2 IVs mean centered and z-scored")
# Print the heatmap
print(ggheatmap)
write_csv(dr2_center, "dr2_center_DVs.csv")
dr2_center = data.frame(ppt = scale(dr2_vars$ppt, scale = TRUE ),
aud_rhyme = scale(dr2_vars$aud_rhyme_OA, scale = TRUE),
written_rhyme = scale(dr2_vars$written_rhyme_OA, scale = TRUE),
aud_syn = scale(dr2_vars$aud_syn_OA, scale = TRUE),
written_syn = scale(dr2_vars$written_syn, scale = TRUE),
CAT = scale(dr2_vars$CAT, scale = TRUE),
Nonword_rep = scale(dr2_vars$Nonword_rep, scale = TRUE),
Participant = dr2_vars$participant)
dr2_vars = data.frame(ppt = dr2$ppt/52,
aud_rhyme_OA = dr2$palpa15_aud_rhyme / 60,
written_rhyme_OA = dr2$palpa15_written_rhyme / 60,
aud_syn_OA = dr2$palpa49_aud_syn / 60,
written_syn = dr2$palpa50_written_syn/60,
CAT = dr2$cat_mmt_1,
Nonword_rep = dr2$palpa8_nwor/30,
participant = dr2$participant)
dr2_center = data.frame(ppt = scale(dr2_vars$ppt, scale = TRUE ),
aud_rhyme = scale(dr2_vars$aud_rhyme_OA, scale = TRUE),
written_rhyme = scale(dr2_vars$written_rhyme_OA, scale = TRUE),
aud_syn = scale(dr2_vars$aud_syn_OA, scale = TRUE),
written_syn = scale(dr2_vars$written_syn, scale = TRUE),
CAT = scale(dr2_vars$CAT, scale = TRUE),
Nonword_rep = scale(dr2_vars$Nonword_rep, scale = TRUE),
Participant = dr2_vars$participant)
stargazer(data.frame(dr2_center), type = "text", title = "Table 6: DR2 all vars, mean centered and z-scaled", summary = FALSE, digits = 2, align = TRUE, rownames = TRUE)
#correlation matrix
cormat = round(cor(dr2_center), 2)
#working directory package
library(here)
#to load data
library(readxl)
library(readr)
#to manipulate data, dplyr, purr, etc and to plot w ggplot2
library(tidyverse)
#list manipulation
library(rlist)
#Plot tree structure
library(data.tree)
#Frequentist multilevel models
library(lme4)
#Bayesian multilevel models
library(brms)
#pretty plots
library(sjPlot)
library(httr)
library(stargazer)
#load data
data = read_csv(here("formatted data", "mpt_analysis_data.csv"))
ivs = read_csv(here("dr2_centered_IVs.csv"))
# create correct variable structures
data$yy.lag <- as.numeric(data$yy.lag)
data$t.lag <- as.numeric(data$t.lag)
data$c.lag <- as.numeric(data$c.lag)
data$item <- as.factor(data$item)
data$person <- as.factor(data$id)
data$trial <- as.factor(data$TRIAL_INDEX)
data$node <- as.factor(data$node)
data$node.1 <- as.factor(data$node.1)
data$node.2 <- as.factor(data$node.2)
data$node.3 <- as.factor(data$node.3)
data$obs <- seq(1,nrow(data))
data = data %>%
group_by(person, item) %>%
mutate(time = row_number())
data = data %>%
group_by(person, item) %>%
mutate(trial_re = row_number()) %>%
ungroup() %>%
mutate(obs = seq(1, nrow(data), 1))
ivs$sem = (ivs$ppt + ivs$aud_syn + ivs$aud_rhyme)/3
ivs$phon = (ivs$aud_rhyme + ivs$written_rhyme + ivs$Nonword_rep)
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r, include=FALSE}
library(readr)
#working directory package
library(here)
#to load data
library(readxl)
library(readr)
#to manipulate data, dplyr, purr, etc and to plot w ggplot2
library(tidyverse)
library(janitor)
library(reshape2)
#Plot tree structure
library(data.tree)
#Frequentist multilevel models
library(lme4)
#Bayesian multilevel models
library(brms)
#pretty plots
library(sjPlot)
library(stargazer)
library(factoextra)
###necessary for downlaoding and install factoextra, nice package for plotting and summarizing opca
#if(!require(devtools)) install.packages("devtools")
#devtools::install_github("kassambara/factoextra")
```
```{r, include=FALSE}
#load data
here()
dr1 = read_csv(here("DR1PCADATA.csv"))
dr2 = read_excel(here("VWP_PreTx_assessments.xlsx"))
data = clean_names(dr1)
```
### fix palpa 49 outlier, assuming it is a typo
```{r}
data = data %>%
mutate(ifelse(palpa49_audsyn_hi == 96.6700, 0.96700, palpa49_audsyn_hi))
summary(data$palpa49_audsyn_hi)
```
```{r}
#create data set for pca
data2 = data.frame(
#sweight = data$s_weight,
#pweight = data$p_weight,
ppt = data$ppt,
#p_nwREP_count = data$palpa8_nword,
aud_rhyme_OA = data$palpa15_a_overall,
written_rhyme_OA = data$palpa15_w_overall,
aud_syn_OA = data$palpa49_audsyn_overall,
written_syn = data$palpa_50_written_synonym_overall,
CAT = data$pre_mean,
participant = as.factor(seq(1:nrow(data))))
stargazer(data.frame(data2), type = "text", title = "Table 1: DR1 Sample", digits = 2, align = TRUE)
dr2namechange = data.frame(ppt = dr2$ppt/52,
aud_rhyme_OA = dr2$palpa15_aud_rhyme / 60,
written_rhyme_OA = dr2$palpa15_written_rhyme / 60,
aud_syn_OA = dr2$palpa49_aud_syn / 60,
written_syn = dr2$palpa50_written_syn/60,
CAT = dr2$cat_mmt_1,
participant = dr2$participant)
stargazer(data.frame(dr2namechange), type = "text", title = "Table 2: DR2 Sample", digits = 2, align = TRUE)
pcadata = rbind(data2, dr2namechange)
stargazer(data.frame(pcadata), type = "text", title = "Table 3: DR1&2 Sample", digits = 2, align = TRUE)
#following suggestions from gary dell, take square root of s and p for analysis.
# data3 = data2 %>%
#   #mutate(sweight_sqr =  sqrt(sweight)) %>%
#   #mutate(pweight_sqr = sqrt(pweight)) %>%
#   #remove old estimates of s and p
#     select(c(-sweight, -pweight))
```
#df_center = data.frame(sapply(pcadata, function(x) scale(x, scale = FALSE)))
df_center = data.frame(ppt = scale(pcadata$ppt, scale = TRUE ),
aud_rhyme = scale(pcadata$aud_rhyme_OA, scale = TRUE),
written_rhyme = scale(pcadata$written_rhyme_OA, scale = TRUE),
aud_syn = scale(pcadata$aud_syn_OA, scale = TRUE),
written_syn = scale(pcadata$written_syn, scale = TRUE)
)
dr2_center = data.frame(ppt = scale(dr2_vars$ppt, scale = TRUE ),
aud_rhyme = scale(dr2_vars$aud_rhyme_OA, scale = TRUE),
written_rhyme = scale(dr2_vars$written_rhyme_OA, scale = TRUE),
aud_syn = scale(dr2_vars$aud_syn_OA, scale = TRUE),
written_syn = scale(dr2_vars$written_syn, scale = TRUE),
CAT = scale(dr2_vars$CAT, scale = TRUE),
Nonword_rep = scale(dr2_vars$Nonword_rep, scale = TRUE),
Participant = dr2_vars$participant)
dr2_vars = data.frame(ppt = dr2$ppt/52,
aud_rhyme_OA = dr2$palpa15_aud_rhyme / 60,
written_rhyme_OA = dr2$palpa15_written_rhyme / 60,
aud_syn_OA = dr2$palpa49_aud_syn / 60,
written_syn = dr2$palpa50_written_syn/60,
CAT = dr2$cat_mmt_1,
Nonword_rep = dr2$palpa8_nwor/30,
participant = dr2$participant)
dr2_center = data.frame(ppt = scale(dr2_vars$ppt, scale = TRUE ),
aud_rhyme = scale(dr2_vars$aud_rhyme_OA, scale = TRUE),
written_rhyme = scale(dr2_vars$written_rhyme_OA, scale = TRUE),
aud_syn = scale(dr2_vars$aud_syn_OA, scale = TRUE),
written_syn = scale(dr2_vars$written_syn, scale = TRUE),
CAT = scale(dr2_vars$CAT, scale = TRUE),
Nonword_rep = scale(dr2_vars$Nonword_rep, scale = TRUE),
Participant = dr2_vars$participant)
dr2_vars = data.frame(ppt = dr2$ppt/52,
aud_rhyme_OA = dr2$palpa15_aud_rhyme / 60,
written_rhyme_OA = dr2$palpa15_written_rhyme / 60,
aud_syn_OA = dr2$palpa49_aud_syn / 60,
written_syn = dr2$palpa50_written_syn/60,
CAT = dr2$cat_mmt_1,
Nonword_rep = dr2$palpa8_nwor/30,
participant = dr2$participant)
dr2_center = data.frame(ppt = scale(dr2_vars$ppt, scale = TRUE ),
aud_rhyme = scale(dr2_vars$aud_rhyme_OA, scale = TRUE),
written_rhyme = scale(dr2_vars$written_rhyme_OA, scale = TRUE),
aud_syn = scale(dr2_vars$aud_syn_OA, scale = TRUE),
written_syn = scale(dr2_vars$written_syn, scale = TRUE),
CAT = scale(dr2_vars$CAT, scale = TRUE),
Nonword_rep = scale(dr2_vars$Nonword_rep, scale = TRUE),
Participant = dr2_vars$participant)
stargazer(data.frame(dr2_center), type = "text", title = "Table 6: DR2 all vars, mean centered and z-scaled", summary = FALSE, digits = 2, align = TRUE, rownames = TRUE)
#correlation matrix
cormat = round(cor(dr2_center[,1::7]), 2)
dr2_vars = data.frame(ppt = dr2$ppt/52,
aud_rhyme_OA = dr2$palpa15_aud_rhyme / 60,
written_rhyme_OA = dr2$palpa15_written_rhyme / 60,
aud_syn_OA = dr2$palpa49_aud_syn / 60,
written_syn = dr2$palpa50_written_syn/60,
CAT = dr2$cat_mmt_1,
Nonword_rep = dr2$palpa8_nwor/30,
participant = dr2$participant)
dr2_center = data.frame(ppt = scale(dr2_vars$ppt, scale = TRUE ),
aud_rhyme = scale(dr2_vars$aud_rhyme_OA, scale = TRUE),
written_rhyme = scale(dr2_vars$written_rhyme_OA, scale = TRUE),
aud_syn = scale(dr2_vars$aud_syn_OA, scale = TRUE),
written_syn = scale(dr2_vars$written_syn, scale = TRUE),
CAT = scale(dr2_vars$CAT, scale = TRUE),
Nonword_rep = scale(dr2_vars$Nonword_rep, scale = TRUE),
Participant = dr2_vars$participant)
stargazer(data.frame(dr2_center), type = "text", title = "Table 6: DR2 all vars, mean centered and z-scaled", summary = FALSE, digits = 2, align = TRUE, rownames = TRUE)
#correlation matrix
cormat = round(cor(dr2_center[,1:7]), 2)
#rearrange data for heatmap looks like a 3 column correlation matrix
melted_cormat <- melt(cormat)
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
# Melt the correlation matrix
library(reshape2)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
geom_text(aes(Var2, Var1, label = value), color = "black", size =4) +
ggtitle("DR2 IVs mean centered and z-scored")
# Print the heatmap
print(ggheatmap)
write_csv(dr2_center, "dr2_center_DVs.csv")
#working directory package
library(here)
#to load data
library(readxl)
library(readr)
#to manipulate data, dplyr, purr, etc and to plot w ggplot2
library(tidyverse)
#list manipulation
library(rlist)
#Plot tree structure
library(data.tree)
#Frequentist multilevel models
library(lme4)
#Bayesian multilevel models
library(brms)
#pretty plots
library(sjPlot)
library(httr)
library(stargazer)
#load data
data = read_csv(here("formatted data", "mpt_analysis_data.csv"))
ivs = read_csv(here("dr2_centered_IVs.csv"))
# create correct variable structures
data$yy.lag <- as.numeric(data$yy.lag)
data$t.lag <- as.numeric(data$t.lag)
data$c.lag <- as.numeric(data$c.lag)
data$item <- as.factor(data$item)
data$person <- as.factor(data$id)
data$trial <- as.factor(data$TRIAL_INDEX)
data$node <- as.factor(data$node)
data$node.1 <- as.factor(data$node.1)
data$node.2 <- as.factor(data$node.2)
data$node.3 <- as.factor(data$node.3)
data$obs <- seq(1,nrow(data))
data = data %>%
group_by(person, item) %>%
mutate(time = row_number())
data = data %>%
group_by(person, item) %>%
mutate(trial_re = row_number()) %>%
ungroup() %>%
mutate(obs = seq(1, nrow(data), 1))
ivs$sem = (ivs$ppt + ivs$aud_syn + ivs$aud_rhyme)/3
ivs$phon = (ivs$aud_rhyme + ivs$written_rhyme + ivs$Nonword_rep)
View(ivs)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
#working directory package
library(here)
#to load data
library(readxl)
library(readr)
#to manipulate data, dplyr, purr, etc and to plot w ggplot2
library(tidyverse)
library(janitor)
library(reshape2)
#Plot tree structure
library(data.tree)
#Frequentist multilevel models
library(lme4)
#Bayesian multilevel models
library(brms)
#pretty plots
library(sjPlot)
library(stargazer)
library(factoextra)
###necessary for downlaoding and install factoextra, nice package for plotting and summarizing opca
#if(!require(devtools)) install.packages("devtools")
#devtools::install_github("kassambara/factoextra")
#load data
here()
dr1 = read_csv(here("DR1PCADATA.csv"))
dr2 = read_excel(here("VWP_PreTx_assessments.xlsx"))
data = clean_names(dr1)
data = data %>%
mutate(ifelse(palpa49_audsyn_hi == 96.6700, 0.96700, palpa49_audsyn_hi))
summary(data$palpa49_audsyn_hi)
#create data set for pca
data2 = data.frame(
#sweight = data$s_weight,
#pweight = data$p_weight,
ppt = data$ppt,
#p_nwREP_count = data$palpa8_nword,
aud_rhyme_OA = data$palpa15_a_overall,
written_rhyme_OA = data$palpa15_w_overall,
aud_syn_OA = data$palpa49_audsyn_overall,
written_syn = data$palpa_50_written_synonym_overall,
CAT = data$pre_mean,
participant = as.factor(seq(1:nrow(data))))
stargazer(data.frame(data2), type = "text", title = "Table 1: DR1 Sample", digits = 2, align = TRUE)
dr2namechange = data.frame(ppt = dr2$ppt/52,
aud_rhyme_OA = dr2$palpa15_aud_rhyme / 60,
written_rhyme_OA = dr2$palpa15_written_rhyme / 60,
aud_syn_OA = dr2$palpa49_aud_syn / 60,
written_syn = dr2$palpa50_written_syn/60,
CAT = dr2$cat_mmt_1,
participant = dr2$participant)
stargazer(data.frame(dr2namechange), type = "text", title = "Table 2: DR2 Sample", digits = 2, align = TRUE)
pcadata = rbind(data2, dr2namechange)
stargazer(data.frame(pcadata), type = "text", title = "Table 3: DR1&2 Sample", digits = 2, align = TRUE)
#following suggestions from gary dell, take square root of s and p for analysis.
# data3 = data2 %>%
#   #mutate(sweight_sqr =  sqrt(sweight)) %>%
#   #mutate(pweight_sqr = sqrt(pweight)) %>%
#   #remove old estimates of s and p
#     select(c(-sweight, -pweight))
correlation = round(cor(pcadata[,1:6]),2)
stargazer(correlation, summary = FALSE, type = "text", title = "Table 4: DR1 and 2 correlation matrix", align = TRUE, digits = 2)
#df_center = data.frame(sapply(pcadata, function(x) scale(x, scale = FALSE)))
df_center = data.frame(ppt = scale(pcadata$ppt, scale = TRUE ),
aud_rhyme = scale(pcadata$aud_rhyme_OA, scale = TRUE),
written_rhyme = scale(pcadata$written_rhyme_OA, scale = TRUE),
aud_syn = scale(pcadata$aud_syn_OA, scale = TRUE),
written_syn = scale(pcadata$written_syn, scale = TRUE)
)
stargazer(data.frame(pcadata), type = "text", title = "Table 5: Raw variables (should have unequal variances)")
stargazer(data.frame(df_center), type = "text", title = "Table 6: Mean Centered Variables (should have equal variance)")
#inspect distributions
df_center %>%
mutate(Participant = seq(1: nrow(df_center))) %>%
gather(Assessment, Estimate, ppt:written_syn) %>%
ggplot(aes(x = Estimate)) +
geom_histogram(color = "steelblue", size = 1, bins = 20) +
labs(title = "Figure 2: Distribution of Dose Response 1 and 2 variables mean centered and z-scored") +
facet_wrap(~ Assessment)
#correlation matrix
cormat = round(cor(df_center), 2)
#rearrange data for heatmap looks like a 3 column correlation matrix
melted_cormat <- melt(cormat)
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
# Melt the correlation matrix
library(reshape2)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reorder the correlation matrix
cormat <- reorder_cormat(cormat)
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
geom_text(aes(Var2, Var1, label = value), color = "black", size =4)  +
ggtitle("Figure 3: DR 1 and 2 IVs, mean centered and z-scored")
# Print the heatmap
print(ggheatmap)
#covmatrix = cov.wt(df_center)
#cm = data.frame(covmatrix$cov)
#pca_out = princomp(~ ppt + aud_rhyme + written_rhyme + aud_syn + written_syn, covmatrix  = cm, scores = T)
dr2_vars = data.frame(ppt = dr2$ppt/52,
aud_rhyme_OA = dr2$palpa15_aud_rhyme / 60,
written_rhyme_OA = dr2$palpa15_written_rhyme / 60,
aud_syn_OA = dr2$palpa49_aud_syn / 60,
written_syn = dr2$palpa50_written_syn/60,
CAT = dr2$cat_mmt_1,
Nonword_rep = dr2$palpa8_nwor/30,
participant = dr2$participant)
dr2_center = data.frame(ppt = scale(dr2_vars$ppt, scale = TRUE ),
aud_rhyme = scale(dr2_vars$aud_rhyme_OA, scale = TRUE),
written_rhyme = scale(dr2_vars$written_rhyme_OA, scale = TRUE),
aud_syn = scale(dr2_vars$aud_syn_OA, scale = TRUE),
written_syn = scale(dr2_vars$written_syn, scale = TRUE),
CAT = scale(dr2_vars$CAT, scale = TRUE),
Nonword_rep = scale(dr2_vars$Nonword_rep, scale = TRUE),
Participant = dr2_vars$participant)
dr2_center = data.frame(ppt = scale(dr2_vars$ppt, scale = TRUE ),
aud_rhyme = scale(dr2_vars$aud_rhyme_OA, scale = TRUE),
written_rhyme = scale(dr2_vars$written_rhyme_OA, scale = TRUE),
aud_syn = scale(dr2_vars$aud_syn_OA, scale = TRUE),
written_syn = scale(dr2_vars$written_syn, scale = TRUE),
CAT = scale(dr2_vars$CAT, scale = TRUE),
Nonword_rep = scale(dr2_vars$Nonword_rep, scale = TRUE),
Participant = dr2_vars$participant)
write.csv(dr2_center, "dr2_IVs.csv")
#load data
data = read_csv(here("formatted data", "mpt_analysis_data.csv"))
ivs = read_csv(here("dr2_IVs.csv"))
#load data
data = read_csv(here("formatted data", "mpt_analysis_data.csv"))
ivs = read_csv(here("dr2_IVs.csv"))
View(ivs)
unique(ivs$Participant)
ifelse(person == 11, "3086, 11", "3086_12")))))))
data = data %>%
mutate(ifelse(person == 1, "3086_01",
ifelese(person == 2, "3086_02",
ifelse(person == 10, "3086_10",
ifelse(person == 13, "3086_13",
ifelse(person == 17, "3086_17",
ifelse(person == 18, "3086_17",
ifelse(person == 11, "3086, 11", "3086_12"))))))))
data = data %>%
mutate(ifelse(person == "1", "3086_01",
ifelese(person == 2, "3086_02",
ifelse(person == 10, "3086_10",
ifelse(person == 13, "3086_13",
ifelse(person == 17, "3086_17",
ifelse(person == 18, "3086_17",
ifelse(person == 11, "3086, 11", "3086_12"))))))))
data = data %>%
mutate(ifelse(person == "1", "3086_01",
ifelese(person == "2", "3086_02",
ifelse(person == "10", "3086_10",
ifelse(person == "13", "3086_13",
ifelse(person == "17", "3086_17",
ifelse(person == "18", "3086_17",
ifelse(person == "11", "3086, 11", "3086_12"))))))))
data = data %>%
mutate(ifelse(person == "1", "3086_01",
ifelse(person == "2", "3086_02",
ifelse(person == "10", "3086_10",
ifelse(person == "13", "3086_13",
ifelse(person == "17", "3086_17",
ifelse(person == "18", "3086_17",
ifelse(person == "11", "3086, 11", "3086_12"))))))))
ivs$sem = (ivs$ppt + ivs$aud_syn + ivs$aud_rhyme)/3
ivs$phon = (ivs$aud_rhyme + ivs$written_rhyme + ivs$Nonword_rep)/3
data = data %>%
mutate(sem = ifelse(person = ivs$person, ivs$sem, -999)) %>%
mutate(phon = ifelse(person = ivs$person, ivs$phon, -999))
data = data %>%
mutate(ifelse(person == "1", "3086_01",
ifelse(person == "2", "3086_02",
ifelse(person == "10", "3086_10",
ifelse(person == "13", "3086_13",
ifelse(person == "17", "3086_17",
ifelse(person == "18", "3086_17",
ifelse(person == "11", "3086, 11", "3086_12"))))))))
ln(1.36)/ln(1+1.36)
log(1.36)/log(1+1.36)
exp(1.36)/exp((1+1.36))
exp(0)/exp((1+0))
exp(1.36)/exp((2.36))
exp(-0.5)/exp((.5))
