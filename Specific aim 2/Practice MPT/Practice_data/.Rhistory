Lex_Phon= TreeStructure3$AddChild("Phonological Distractor (a)")
Unrelated = TreeStructure3$AddChild("Unrelated (1-a)")
Sem = Lex_Phon$AddChild("Semantic distractor (1-b)")
Correct = Lex_Phon$AddChild("Correct (b)")
Correct = Sem$AddChild("Correct (c)")
Phon_Dis = Sem$AddChild("Phonologial Distractor 1-c")
plot(TreeStructure3)
install.packages('latex2exp')
library(latex2exp)
#Create tree structure
TreeStructure3= Node$new("Phonological Proccessing of input $\\alpha$$")
Lex_Phon= TreeStructure3$AddChild("Phonological Distractor (a)")
Unrelated = TreeStructure3$AddChild("Unrelated (1-a)")
Sem = Lex_Phon$AddChild("Semantic distractor (1-b)")
Correct = Lex_Phon$AddChild("Correct (b)")
Correct = Sem$AddChild("Correct (c)")
Phon_Dis = Sem$AddChild("Phonologial Distractor 1-c")
plot(TreeStructure3)
TreeStructure3= Node$new("Phonological Proccessing of input $\\alpha$")
Lex_Phon= TreeStructure3$AddChild("Phonological Distractor (a)")
Unrelated = TreeStructure3$AddChild("Unrelated (1-a)")
Sem = Lex_Phon$AddChild("Semantic distractor (1-b)")
Correct = Lex_Phon$AddChild("Correct (b)")
Correct = Sem$AddChild("Correct (c)")
Phon_Dis = Sem$AddChild("Phonologial Distractor 1-c")
plot(TreeStructure3)
#Create tree structure
TreeStructure3= Node$new("$ Phonological Proccessing of input \\ $")
Lex_Phon= TreeStructure3$AddChild("Phonological Distractor (a)")
Unrelated = TreeStructure3$AddChild("Unrelated (1-a)")
Sem = Lex_Phon$AddChild("Semantic distractor (1-b)")
Correct = Lex_Phon$AddChild("Correct (b)")
Correct = Sem$AddChild("Correct (c)")
Phon_Dis = Sem$AddChild("Phonologial Distractor 1-c")
plot(TreeStructure3)
#Create tree structure
TreeStructure3= Node$new("$ Phonological Proccessing of input \\alpha $")
Lex_Phon= TreeStructure3$AddChild("Phonological Distractor (a)")
Unrelated = TreeStructure3$AddChild("Unrelated (1-a)")
Sem = Lex_Phon$AddChild("Semantic distractor (1-b)")
Correct = Lex_Phon$AddChild("Correct (b)")
Correct = Sem$AddChild("Correct (c)")
Phon_Dis = Sem$AddChild("Phonologial Distractor 1-c")
plot(TreeStructure3)
#Create tree structure
TreeStructure3= Node$new("Phonological Proccessing of input")
Lex_Phon= TreeStructure3$AddChildNode("Phonological Distractor (a)")
TreeStructure3= Node$new("Phonological Proccessing of input")
Lex_Phon= TreeStructure3$AddChil("Phonological Distractor (a)")
#Create tree structure
TreeStructure3= Node$new("Phonological Proccessing of input")
Lex_Phon= TreeStructure3$AddChild("Phonological Distractor (a)")
Unrelated = TreeStructure3$AddChild("Unrelated (1-a)")
Sem = Lex_Phon$AddChild("Semantic distractor (1-b)")
Correct = Lex_Phon$AddChild("Correct (b)")
Correct = Sem$AddChild("Correct (c)")
Phon_Dis = Sem$AddChild("Phonologial Distractor 1-c")
plot(TreeStructure3)
Lex_Phon= TreeStructure3$AddChild$Node("Phonological Distractor (a)")
#Create tree structure
TreeStructure3= Node$new("Phonological Proccessing of input")
Lex_Phon= TreeStructure3$AddChildNode("Phonological Distractor (a)")
?AddChildNOde
?AddChildNode
??AddChildNode
#Create tree structure
TreeStructure3= Node$new("Phonological Proccessing of input")
Lex_Phon= Node$AddChildNode("Phonological Distractor (a)")
#Create tree structure
TreeStructure3= Node$new("Phonological Proccessing of input")
TreeStructure3$AddChildNode("Phonological Distractor (a)")
#Create tree structure
TreeStructure3= Node$new("Phonological Proccessing of input")
Lex_Phon= Node$new("Phonological Distractor (a)")
TreeStructure3$AddChildNode(Lex_Phon)
Unrelated = TreeStructure3$AddChild("Unrelated (1-a)")
Sem = Lex_Phon$AddChild("Semantic distractor (1-b)")
Correct = Lex_Phon$AddChild("Correct (b)")
Correct = Sem$AddChild("Correct (c)")
Phon_Dis = Sem$AddChild("Phonologial Distractor 1-c")
plot(TreeStructure3)
#Create tree structure
TreeStructure3= Node$new("Phonological Proccessing of input")
Lex_Phon= Node$new("Anticipated // Phonological Distractor (a)")
TreeStructure3$AddChildNode(Lex_Phon)
Unrelated = TreeStructure3$AddChild("Unrelated (1-a)")
Node$new = Lex_Phon$AddChild("Anticipated // Semantic distractor (1-b)")
Sem = Lex_Phon$AddChild("Anticipated // Semantic distractor (1-b)")
#Create tree structure
TreeStructure3= Node$new("Phonological Proccessing of input")
#Create tree structure
TreeStructure3= Node$new("Phonological Proccessing of input")
#Create tree structure
TreeStructure3= Node$new("Phonological Proccessing of input")
#Create tree structure
TreeStructure3= Node$new("Phonological Proccessing of input")
TreeStructure3 = Node$new("Phonological Proccessing of input")
#Create tree structure
TreeStructure3= Node$new("Phonological Proccessing of input")
#Create tree structure
TreeStructure3= Node$new("Phonological Proccessing of input")
library(data.tree)
#Create tree structure
TreeStructure3= Node$new("Phonological Proccessing of input")
TreeStructure3= Node$new("Phonological Proccessing of input")
library(data.tree)
knitr::opts_chunk$set(echo = TRUE)
#Create tree structure
TreeStructure3= Node$new("Phonological Proccessing of input")
Lex_Phon= Node$new("Anticipated // Phonological Distractor (a)")
TreeStructure3$AddChildNode(Lex_Phon)
Unrelated = TreeStructure3$AddChild("Unrelated (1-a)")
Sem = Lex_Phon$AddChild("Anticipated // Semantic distractor (1-b)")
Lex_Phon$AddChildNode(Sem)
Correct = Lex_Phon$AddChild("Correct (b)")
Correct = Sem$AddChild("Correct (c)")
Phon_Dis = Sem$AddChild("Phonologial Distractor 1-c")
plot(TreeStructure3)
#Create tree structure
TreeStructure3= Node$new("Phonological Proccessing of input")
Lex_Phon= Node$new("Anticipated // Phonological Distractor (a)")
TreeStructure3$AddChildNode(Lex_Phon)
Unrelated = TreeStructure3$AddChild("Unrelated (1-a)")
Sem = Lex_Phon$AddChild("Anticipated // Semantic distractor (1-b)")
Lex_Phon$AddChildNode(Sem)
Correct = Lex_Phon$AddChild("Correct (b)")
Correct = Sem$AddChild("Correct (c)")
Phon_Dis = Sem$AddChild("Phonologial Distractor 1-c")
SetNodeStyle(TreeStructure3,  shape = "box",
fontname = "helvetica", tooltip = GetDefaultTooltip)
plot(TreeStructure3)
#Create tree structure
TreeStructure3= Node$new("Phonological Proccessing of input")
Lex_Phon= Node$new("Anticipated // Phonological Distractor (a)")
TreeStructure3$AddChildNode(Lex_Phon)
Unrelated = TreeStructure3$AddChild("Unrelated (1-a)")
Sem = Lex_Phon$AddChild("Anticipated // Semantic distractor (1-b)")
Lex_Phon$AddChildNode(Sem)
Correct = Lex_Phon$AddChild("Correct (b)")
Correct = Sem$AddChild("Correct (c)")
Phon_Dis = Sem$AddChild("Phonologial Distractor 1-c")
Lex_Phon$
SetNodeStyle(TreeStructure3,  shape = "box",
fontname = "helvetica", tooltip = GetDefaultTooltip)
#Create tree structure
TreeStructure3= Node$new("Phonological Proccessing of input")
Lex_Phon= Node$new("Anticipated // Phonological Distractor (a)")
TreeStructure3$AddChildNode(Lex_Phon)
Unrelated = TreeStructure3$AddChild("Unrelated (1-a)")
Sem = Lex_Phon$AddChild("Anticipated // Semantic distractor (1-b)")
Lex_Phon$AddChildNode(Sem)
Correct = Lex_Phon$AddChild("Correct (b)")
Correct = Sem$AddChild("Correct (c)")
Phon_Dis = Sem$AddChild("Phonologial Distractor 1-c")
SetNodeStyle(TreeStructure3,  shape = "box",
fontname = "helvetica", tooltip = GetDefaultTooltip)
Do(TreeStructure$leaves, function(node) SetNodeStyle(node, shape = "egg"))
#Create tree structure
TreeStructure3= Node$new("Phonological Proccessing of input")
Lex_Phon= Node$new("Anticipated // Phonological Distractor (a)")
TreeStructure3$AddChildNode(Lex_Phon)
Unrelated = TreeStructure3$AddChild("Unrelated (1-a)")
Sem = Lex_Phon$AddChild("Anticipated // Semantic distractor (1-b)")
Lex_Phon$AddChildNode(Sem)
Correct = Lex_Phon$AddChild("Correct (b)")
Correct = Sem$AddChild("Correct (c)")
Phon_Dis = Sem$AddChild("Phonologial Distractor 1-c")
SetNodeStyle(TreeStructure3,  shape = "box",
fontname = "helvetica", tooltip = GetDefaultTooltip)
Do(TreeStructure3$leaves, function(node) SetNodeStyle(node, shape = "egg"))
plot(TreeStructure3)
#Create tree structure
TreeStructure3= Node$new("(Node 1)Phonological Proccessing of input")
Lex_Phon= Node$new("(Node 2) Anticipated // Phonological Distractor (a)")
TreeStructure3$AddChildNode(Lex_Phon)
Unrelated = TreeStructure3$AddChild("Unrelated (1-a)")
Sem = Lex_Phon$AddChild("(Node 3)Anticipated // Semantic distractor (1-b)")
Lex_Phon$AddChildNode(Sem)
Correct = Lex_Phon$AddChild("Correct (b)")
Correct = Sem$AddChild("Correct (c)")
Phon_Dis = Sem$AddChild("Phonologial Distractor 1-c")
SetNodeStyle(TreeStructure3,  shape = "box",
fontname = "helvetica", tooltip = GetDefaultTooltip)
Do(TreeStructure3$leaves, function(node) SetNodeStyle(node, shape = "egg"))
plot(TreeStructure3)
#Create tree structure
TreeStructure3= Node$new("(Node 1)Phonological Proccessing of input")
Lex_Phon= Node$new("(Node 2) Anticipated // Phonological Distractor (a)")
TreeStructure3$AddChildNode(Lex_Phon)
Unrelated = TreeStructure3$AddChild("Unrelated (1-a)")
Sem = Lex_Phon$AddChild("(Node 3)Anticipated // Semantic distractor (1-b)")
Lex_Phon$AddChildNode(Sem)
Correct = Lex_Phon$AddChild("Correct (b)")
Correct = Sem$AddChild("Correct (c)")
Phon_Dis = Sem$AddChild("Phonologial Distractor 1-c")
SetNodeStyle(TreeStructure3,  shape = "egg",
fontname = "helvetica", tooltip = GetDefaultTooltip)
Do(TreeStructure3$leaves, function(node) SetNodeStyle(node, shape = "box"))
plot(TreeStructure3)
#Create tree structure
TreeStructure3= Node$new("(Node 1)Phonological Proccessing of input")
Lex_Phon= Node$new("(Node 2) Anticipated // Phonological Distractor (a)")
TreeStructure3$AddChildNode(Lex_Phon)
Unrelated = TreeStructure3$AddChild("Unrelated (1-a) [y*tji1] ")
Sem = Lex_Phon$AddChild("(Node 3)Anticipated // Semantic distractor (1-b) [y*tji3]")
Lex_Phon$AddChildNode(Sem)
Correct = Lex_Phon$AddChild("Correct (b) [y*tji2]")
Correct = Sem$AddChild("Correct (c) [y*tji4]")
Phon_Dis = Sem$AddChild("Phonologial Distractor 1-c")
SetNodeStyle(TreeStructure3,  shape = "egg",
fontname = "helvetica", tooltip = GetDefaultTooltip)
Do(TreeStructure3$leaves, function(node) SetNodeStyle(node, shape = "box"))
plot(TreeStructure3)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(rstan)
library(tidyverse)
library(data.tree)
#load data
library(readxl)
Practice_xls <- read_excel("Participant2.xlsx") %>%
filter(condition != "practice")
#Wrangle data
df2 = Practice_xls %>%
rename(aoi1 = RIGHT_IA_1_SAMPLE_COUNT) %>%
rename(aoi2 = RIGHT_IA_2_SAMPLE_COUNT) %>%
rename(aoi3 = RIGHT_IA_3_SAMPLE_COUNT) %>%
rename(aoi4 = RIGHT_IA_4_SAMPLE_COUNT)
#create single column showing what aoi participant was looking at
df2$aoi_all = ifelse(df2$aoi1 > 0, 1,
ifelse(df2$aoi2 > 0, 2,
ifelse(df2$aoi3 > 0, 3, 4)))
df2$y_5 = ifelse(df2$aoi_all == df2$unrelated_location, 0,
ifelse(df2$aoi_all == df2$phonemic_location, 1,
ifelse(df2$aoi_all == df2$semantic_location, 2,
ifelse(df2$aoi_all == df2$target_location, 3, 4))))
# yy.list is the hierachical structure of available steps in the tree model.
library(tidyr)
df2 = df2 %>%
mutate(y =  na_if(y_5, 4)) %>%
fill(y, .direction = "up")
#check to m ake sure we only have 0 through 3
unique(df2$y)
#Create count for each var
df3 = data.frame(Count = df2$y,
resp = ifelse(df2$y == 0, "Unrelated",
ifelse(df2$y == 1, "Phonological",
ifelse(df2$y == 2, "Semantic", "Correct"))))
df3 %>%
count(resp)
#Create tree structure
TreeStructure3= Node$new("(Node 1)Auditory input")
Lex_Phon= Node$new("(Node 2) Anticipated // Phonological Distractor (a)")
TreeStructure3$AddChildNode(Lex_Phon)
Unrelated = TreeStructure3$AddChild("Unrelated (1-a) [y*tji1] ")
Sem = Lex_Phon$AddChild("(Node 3)Anticipated // Semantic distractor (1-b) [y*tji3]")
Lex_Phon$AddChildNode(Sem)
Correct = Lex_Phon$AddChild("Correct (b) [y*tji2]")
Correct = Sem$AddChild("Correct (c) [y*tji4]")
Phon_Dis = Sem$AddChild("Phonologial Distractor 1-c")
SetNodeStyle(TreeStructure3,  shape = "egg",
fontname = "helvetica", tooltip = GetDefaultTooltip)
Do(TreeStructure3$leaves, function(node) SetNodeStyle(node, shape = "box"))
plot(TreeStructure3)
N_trials = nrow(df3)
resp = c(1211, 1423, 1258, 1417)
data_sMPT = list(N_trials,
resp)
setwd("~/GitHub/DR2/Specific aim 2/Practice MPT/Practice_data")
mpt_mnm <- system.file("stan_models",
"mpt_mnm.stan")
fit_sMPT = stan(file = mpt_mnm, data = data_sMPT)
fit_sMPT = stan(
file = "mpt_mnm.stan",  # Stan program
data = data_sMPT,    # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 4,              # number of cores (could use one per chain)
)
setwd("~/GitHub/DR2/Specific aim 2/Practice MPT/Practice_data")
fit_sMPT = stan(
file = "mpt_mnm.stan",  # Stan program
data = data_sMPT,    # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 4,              # number of cores (could use one per chain)
)
setwd("~/GitHub/DR2/Specific aim 2/Practice MPT/Practice_data")
fit_sMPT = stan(
file = "mpt_mnm.stan",  # Stan program
data = data_sMPT,    # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 4,              # number of cores (could use one per chain)
)
print(fit_sMPT)
setwd("~/GitHub/DR2/Specific aim 2/Practice MPT/Practice_data")
fit_sMPT = stan(
file = "mpt_mnm.stan",  # Stan program
data = data_sMPT,    # named list ofdata
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 4,              # number of cores (could use one per chain)
)
}"
mpt_simp = "
mpt_simp = "
data {
int<lower = 1> N_trials;
int<lower = 0, upper = N_trials> resp[4];
}
parameters {
real<lower = 0, upper = 1> a;
real<lower = 0, upper = 1> b;
real<lower = 0, upper = 1> c;
}
transformed parameters {
simplex[5] theta;
theta[1] = 1 - a; //Pr_unrel
theta[2] = a + a * b * (1-c); //Pr_phon
theta[3] = a * (1-b);  //S
theta[4] = a * (b) + a  * (1-b) * c; //Pr_correct
}
model {
target += beta_lpdf(a | 2, 2);
target += beta_lpdf(b | 2, 2);
target += beta_lpdf(c | 2, 2);
target += multinomial_lpmf(resp | theta);
}
generated quantities{
int pred_resp[5];
pred_resp = multinomial_rng(theta, 5);
}"
fit_sMPT = stan(
model_code = mpt_simp,  # Stan program
data = data_sMPT,    # named list ofdata
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 4,              # number of cores (could use one per chain)
)
str(N_trials)
N_trials = 5309
N_trials = 5309
resp = c(1211, 1423, 1258, 1417)
#data for model
data_sMPT = list(N_trials,
resp)
fit_sMPT = stan(
model_code = mpt_simp,  # Stan program
data = data_sMPT,    # named list ofdata
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 4,              # number of cores (could use one per chain)
)
#data for model
data_sMPT = list(N_trials,
resp)
fit_sMPT = stan(
model_code = mpt_simp,  # Stan program
data = data_sMPT,    # named list ofdata
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 4,              # number of cores (could use one per chain)
)
#data for model
data_sMPT = list(as.integer(N_trials),
resp)
fit_sMPT = stan(
model_code = mpt_simp,  # Stan program
data = data_sMPT,    # named list ofdata
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 4,              # number of cores (could use one per chain)
)
#data for model
data_sMPT = list(N_trials = as.integer(N_trials),
resp)
fit_sMPT = stan(
model_code = mpt_simp,  # Stan program
data = data_sMPT,    # named list ofdata
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 4,              # number of cores (could use one per chain)
)
#data for model
data_sMPT = list(N_trials = as.integer(N_trials),
resp = c(1211, 1423, 1258, 1417))
fit_sMPT = stan(
model_code = mpt_simp,  # Stan program
data = data_sMPT,    # named list ofdata
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 4,              # number of cores (could use one per chain)
)
mpt_simp = "
data {
int<lower = 1> N_trials;
int<lower = 0, upper = N_trials> resp[4];
}
parameters {
real<lower = 0, upper = 1> a;
real<lower = 0, upper = 1> b;
real<lower = 0, upper = 1> c;
}
transformed parameters {
simplex[4] theta;
theta[1] = 1 - a; //Pr_unrel
theta[2] = a + a * b * (1-c); //Pr_phon
theta[3] = a * (1-b);  //S
theta[4] = a * (b) + a  * (1-b) * c; //Pr_correct
}
model {
target += beta_lpdf(a | 2, 2);
target += beta_lpdf(b | 2, 2);
target += beta_lpdf(c | 2, 2);
target += multinomial_lpmf(resp | theta);
}
generated quantities{
int pred_resp[5];
pred_resp = multinomial_rng(theta, 5);
}"
N_trials = 5309
resp = c(1211, 1423, 1258, 1417)
#data for model
data_sMPT = list(N_trials = as.integer(N_trials),
resp = c(1211, 1423, 1258, 1417))
fit_sMPT = stan(
model_code = mpt_simp,  # Stan program
data = data_sMPT,    # named list ofdata
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 4,              # number of cores (could use one per chain)
)
fit_sMPT = stan(
model_code = mpt_simp,  # Stan program
data = data_sMPT,    # named list ofdata
chains = 1,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 1,              # number of cores (could use one per chain)
)
theta1 = 1 - a; //Pr_NR
theta2 = a * (1 - t) * (1 - f) * (1 - c) + a * t * (1 - f) * (1 - c); //Pr_Neologism
theta3 = a * (1 - t) * (1 - f) * c +  a * t * (1 - f) * c;  //Pr_Formal
theta4 = a * (1 - t) * f; //Pr_Mixed
theta5 = a * t * f; //Pr_Correct
a <- .75
t <- .9
f <- .8
c <- .1
theta1 = 1 - a
theta2 = a * (1 - t) * (1 - f) * (1 - c) + a * t * (1 - f) * (1 - c)
theta3 = a * (1 - t) * (1 - f) * c +  a * t * (1 - f) * c
theta4 = a * (1 - t) * f
theta5 = a * t * f
a <- .75
t <- .9
f <- .8
c <- .1
theta1 = 1 - a
theta2 = a * (1 - t) * (1 - f) * (1 - c) + a * t * (1 - f) * (1 - c)
theta3 = a * (1 - t) * (1 - f) * c +  a * t * (1 - f) * c
theta4 = a * (1 - t) * f
theta5 = a * t * f
theta1
theta2
theta1 + theta2 + theta3 +theta4+theta5
1417+1423+1258+1211
resp = as.integer(c(1211, 1423, 1258, 1417))
#data for model
data_sMPT = list(N_trials = as.integer(N_trials),
resp = as.integer(c(1211, 1423, 1258, 1417)))
fit_sMPT = stan(
model_code = mpt_simp,  # Stan program
data = data_sMPT,    # named list ofdata
chains = 1,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 1,              # number of cores (could use one per chain)
)
N_trials <- 100
(ans_mn <- rmultinom(1, N_trials, true_theta))
(true_theta <- tibble(theta_NR = .2,
theta_Neologism = .1,
theta_Formal = .2,
theta_Mixed = .08,
theta_Correct =  1 -
(theta_NR + theta_Neologism + theta_Formal + theta_Mixed)))
N_trials <- 100
(ans_mn <- rmultinom(1, N_trials, true_theta))
theta_u = 1211/5309
theta_p = 1423/5309
theta_s = 1258/5309
theta_c = 1417/5309
theta_u + theta_p +theta_s + theta_c
theta[1] = 1 - a; //Pr_unrel
theta[2] = a + a * b * (1-c); //Pr_phon
theta[3] = a * (1-b);  //S
theta[4] = a * (b) + a  * (1-b) * c; //Pr_correct
