person = df$RECORDING_SESSION_LABEL,
time = df$TIMESTAMP,
item = df$targetword,
y_1 = df$RIGHT_INTEREST_AREA_LABEL
) %>%
filter(y != ".")
data = data.frame(
trial = df$TRIAL_INDEX,
person = df$RECORDING_SESSION_LABEL,
time = df$TIMESTAMP,
item = df$targetword,
y_1 = df$RIGHT_INTEREST_AREA_LABEL
)
View(data)
unique(data$y_1)
<center>
"Non-fixation events (blinks and saccades) were treated in the same way, attributing the duration of blink or saccade to the next object that was fixated; as a result, there were no missing polytomous data in the time series for a given trial, prior to modeling multinomial processing."
<center>
data = df2 = data.frame(
trial = df$TRIAL_INDEX,
person = df$RECORDING_SESSION_LABEL,
time = df$TIMESTAMP,
item = df$targetword,
y = y_1) %>%
filter(y_1 != c(".", "ATTENTION_GETTER"))
data = df2 = data.frame(
trial = df$TRIAL_INDEX,
person = df$RECORDING_SESSION_LABEL,
time = df$TIMESTAMP,
item = df$targetword,
y = y_1) %>%
filter(y!= c(".", "ATTENTION_GETTER"))
data = data.frame(
trial = df2$TRIAL_INDEX,
person = df2$RECORDING_SESSION_LABEL,
time = df2$TIMESTAMP,
item = df2$targetword,
y = df2$y_1) %>%
filter(y!= c(".", "ATTENTION_GETTER"))
data = data.frame(
trial = df2$TRIAL_INDEX,
person = df2$RECORDING_SESSION_LABEL,
time = df2$TIMESTAMP,
item = df2$targetword,
y = df2$y_1) %>%
filter(y!= c("."))
data = data.frame(
trial = df2$TRIAL_INDEX,
person = df2$RECORDING_SESSION_LABEL,
time = df2$TIMESTAMP,
item = df2$targetword,
y = df2$y_1)
df2 = data.frame(
trial = df$TRIAL_INDEX,
person = df$RECORDING_SESSION_LABEL,
time = df$TIMESTAMP,
item = df$targetword,
y_1 = df$RIGHT_INTEREST_AREA_LABEL
)
data = data.frame(
trial = df2$TRIAL_INDEX,
person = df2$RECORDING_SESSION_LABEL,
time = df2$TIMESTAMP,
item = df2$targetword,
y = df2$y_1)
data = data.frame(
trial = df2$TRIAL_INDEX,
person = df2$RECORDING_SESSION_LABEL,
time = df2$TIMESTAMP,
item = df2$targetword,
y = df2$y_1)
data = df2 %>%
filter(y_1 != ".") %>%
filter(y_1 != "ATTENTION_GETTER")
unique(df2$y_1)
unique(data$y_1)
df3 = df2 %>%
filter(y_1 != ".") %>%
filter(y_1 != "ATTENTION_GETTER")
unique(data$y_1)
unique(data$y)
View(data)
data = df2 %>%
filter(y_1 != ".") %>%
filter(y_1 != "ATTENTION_GETTER") %>%
rename(y_1, y)
data = df2 %>%
filter(y_1 != ".") %>%
filter(y_1 != "ATTENTION_GETTER") %>%
rename(y_1=y)
rename(y=y_1
data = df2 %>%
data = df2 %>%
filter(y_1 != ".") %>%
filter(y_1 != "ATTENTION_GETTER") %>%
rename(y=y_1)
unique(data$y)
df = df2 %>%
filter(y_1 != ".") %>%
filter(y_1 != "ATTENTION_GETTER") %>%
mutate(y_1 = ifelse(y_1 == "TARGET", 3,
ifelse(y_1 == "SEMANTIC", 2,
ifelse(y_1 == "UNRELATED", 1, 0
))))
rename(y=y_1)
df = df2 %>%
filter(y_1 != ".") %>%
filter(y_1 != "ATTENTION_GETTER") %>%
mutate(y_1 = ifelse(df2$y_1 == "TARGET", 3,
ifelse(df2$y_1 == "SEMANTIC", 2,
ifelse(df2$y_1 == "UNRELATED", 1, 0
))))
df4$y_1 = ifelse(df2$y_1 == "TARGET", 3,
ifelse(df2$y_1 == "SEMANTIC", 2,
ifelse(df2$y_1 == "UNRELATED", 1, 0
)))
d4 = df3
df4$y_1 = ifelse(df2$y_1 == "TARGET", 3,
ifelse(df2$y_1 == "SEMANTIC", 2,
ifelse(df2$y_1 == "UNRELATED", 1, 0
)))
d4 = df3
df4$y_1 = ifelse(d32$y_1 == "TARGET", 3,
ifelse(df3$y_1 == "SEMANTIC", 2,
ifelse(df3$y_1 == "UNRELATED", 1, 0
)))
df4$y_1 = ifelse(d3$y_1 == "TARGET", 3,
ifelse(df3$y_1 == "SEMANTIC", 2,
ifelse(df3$y_1 == "UNRELATED", 1, 0
)))
df3 = df2 %>%
filter(y_1 != ".") %>%
filter(y_1 != "ATTENTION_GETTER")
d4 = df3
df4$y_1 = ifelse(d3$y_1 == "TARGET", 3,
ifelse(df3$y_1 == "SEMANTIC", 2,
ifelse(df3$y_1 == "UNRELATED", 1, 0
)))
df3 = df2 %>%
filter(y_1 != ".") %>%
filter(y_1 != "ATTENTION_GETTER")
d4 = df3
df4$y_1 = ifelse(df3$y_1 == "TARGET", 3,
ifelse(df3$y_1 == "SEMANTIC", 2,
ifelse(df3$y_1 == "UNRELATED", 1, 0
)))
df3 = df2 %>%
filter(y_1 != ".") %>%
filter(y_1 != "ATTENTION_GETTER")
d4 = df3
df4$y_1 = ifelse(df 3$y_1 == "TARGET", 3,
df3 = df2 %>%
filter(y_1 != ".") %>%
filter(y_1 != "ATTENTION_GETTER")
d4 = df3
df4$y_1 = ifelse(df3$y_1 == "TARGET", 3,
ifelse(df3$y_1 == "SEMANTIC", 2,
ifelse(df3$y_1 == "UNRELATED", 1, 0
)))
df3 = df2 %>%
filter(y_1 != ".") %>%
filter(y_1 != "ATTENTION_GETTER")
df4 = df3
df4$y_1 = ifelse(df3$y_1 == "TARGET", 3,
ifelse(df3$y_1 == "SEMANTIC", 2,
ifelse(df3$y_1 == "UNRELATED", 1, 0
)))
df3 = df2 %>%
filter(y_1 != ".") %>%
filter(y_1 != "ATTENTION_GETTER")
df4 = df3
df4$y_1 = ifelse(df3$y_1 == "TARGET", 3,
ifelse(df3$y_1 == "SEMANTIC", 2,
ifelse(df3$y_1 == "UNRELATED", 1, 0
))) %>%
rename(y = y_1)
df4$y_1 = ifelse(df3$y_1 == "TARGET", 3,
ifelse(df3$y_1 == "SEMANTIC", 2,
ifelse(df3$y_1 == "UNRELATED", 1, 0
)))
data = df4 %>%
rename(y_1, y)
data = df4 %>%
rename(y = y_1)
Primary_hyp <- dagify(
Target ~ S,
S ~ P,
P ~ Attempt,
exposure = "Attempt",
outcome = "Target"
)
Primary_hyp <- dagify(
Target ~ S,
S ~ P,
P ~ Attempt,
exposure = "Attempt",
outcome = "Target"
)
tidy_dagitty(Primary_hyp)
ggdag(Primary_hyp, layout = "circle")
number.of.nodes <- 2 # change to 4 later
for (node in 1:number.of.nodes){
data.copy <- data
data.copy$node <- rep(node, nrow(data))
if (node==1){data.node <- data.copy} else {data.node <- rbind(data.node,data.copy)}
}
number.of.nodes <- 2 # change to 4 later
for (node in 1:number.of.nodes){
data.copy <- data
data.copy$node <- rep(node, nrow(data))
if (node==1){data.node <- data.copy} else {data.node <- rbind(data.node,data.copy)}
}
#Create variable yy, not exactly sure where this comes from in the paper, but i think its the response to node of interest
```{r}
yy.list <- list(list(1,1,0),list(1,0,NA))
data.node$yy = NA
```
# I think that the periods are messing up the code block below within variable ```y```
```{r}
yy.list <- list(list(1,1,0),list(1,0,NA))
data.node$yy = NA
for (observation in 1:nrow(data.node)){
data.node$yy[observation] <- yy.list[[data.node$node[observation]]][[data.node$y[observation]]]
}
View(data.node)
unique(data.node$yy)
df3 = df2 %>%
filter(y_1 != ".") %>%
filter(y_1 != "ATTENTION_GETTER")
df4 = df3
df4$y_1 = ifelse(df3$y_1 == "TARGET", 3,
ifelse(df3$y_1 == "SEMANTIC", 2,
ifelse(df3$y_1 == "PHONWMIC", 1, 0
)))
data = df4 %>%
rename(y = y_1)
number.of.nodes <- 2 # change to 4 later
for (node in 1:number.of.nodes){
data.copy <- data
data.copy$node <- rep(node, nrow(data))
if (node==1){data.node <- data.copy} else {data.node <- rbind(data.node,data.copy)}
}
yy.list <- list(list(1,1,0),list(1,0,NA))
for (observation in 1:nrow(data.node)){
data.node$yy[observation] <- yy.list[[data.node$node[observation]]][[data.node$y[observation]]]
}
View(data.node)
df4$y_1 = ifelse(df3$y_1 == "TARGET", 3,
ifelse(df3$y_1 == "SEMANTIC", 2,
ifelse(df3$y_1 == "PHONEMIC", 1, 0
)))
data = df4 %>%
rename(y = y_1)
```{r}
df3 = df2 %>%
filter(y_1 != ".") %>%
filter(y_1 != "ATTENTION_GETTER")
df4 = df3
df4$y_1 = ifelse(df3$y_1 == "TARGET", 3,
ifelse(df3$y_1 == "SEMANTIC", 2,
ifelse(df3$y_1 == "PHONEMIC", 1, 0
)))
data = df4 %>%
rename(y = y_1)
number.of.nodes <- 2 # change to 4 later
for (node in 1:number.of.nodes){
data.copy <- data
data.copy$node <- rep(node, nrow(data))
if (node==1){data.node <- data.copy} else {data.node <- rbind(data.node,data.copy)}
}
yy.list <- list(list(1,1,0),list(1,0,NA))
for (observation in 1:nrow(data.node)){
data.node$yy[observation] <- yy.list[[data.node$node[observation]]][[data.node$y[observation]]]
}
View(data.node)
View(data)
View(df2)
row.index <- 1
for (trial in 1:length(unique.trial)){
for (time in 1:length(unique.time)){
for (node in 1:length(unique.node)){
data.el.trial.time.node <- data.el[(data.el$trial==unique.trial[trial]
& data.el$time==unique.time[time] & data.el$node==unique.node[node]),]
yy.trial.time.node <- data.el.trial.time.node$yy
proportion <- sum(yy.trial.time.node[!is.na(yy.trial.time.node)])/length(yy.trial.time.node)
empirical.logit <- log(proportion/(1 - proportion))
Empirical.Logit[row.index,] <- c(unique.trial[trial], unique.time[time],
unique.node[node], empirical.logit)
row.index <- row.index + 1
}}}
unique.trial <- sort(unique(data.el$trial))
data.el = data.frame(
trial = data.node$trial,
item = data.node$item,
person = data.node$person,
time = data.node$time,
node = data.node$node,
yy = data.node$yy
)
head(data.el)
unique.trial <- sort(unique(data.el$trial))
unique.time <- sort(unique(data.el$time))
unique.node <- sort(unique(data.el$node))
number.variables <- 3
Empirical.Logit <- matrix(nrow=prod(length(unique.trial),length(unique.time),
length(unique.node)), ncol = (number.variables + 1))
row.index <- 1
for (trial in 1:length(unique.trial)){
for (time in 1:length(unique.time)){
for (node in 1:length(unique.node)){
data.el.trial.time.node <- data.el[(data.el$trial==unique.trial[trial]
& data.el$time==unique.time[time] & data.el$node==unique.node[node]),]
yy.trial.time.node <- data.el.trial.time.node$yy
proportion <- sum(yy.trial.time.node[!is.na(yy.trial.time.node)])/length(yy.trial.time.node)
empirical.logit <- log(proportion/(1 - proportion))
Empirical.Logit[row.index,] <- c(unique.trial[trial], unique.time[time],
unique.node[node], empirical.logit)
row.index <- row.index + 1
}}}
Empirical.Logit <- data.frame(Empirical.Logit)
names(Empirical.Logit) <- c("trial", "time", "node", "empirical.logit")
Empirical.Logit$empirical.logit[Empirical.Logit$empirical.logit < -10^6] <- -10^6
Empirical.Logit$empirical.logit[Empirical.Logit$empirical.logit > 10^6] <- 10^6
View(Empirical.Logit)
View(df3)
row.index <- 1
for (trial in 1:length(unique.trial)){
for (node in 1:length(unique.node)){
Empirical.Logit.trial.node <- Empirical.Logit[(Empirical.Logit$trial==unique.trial[trial]
& Empirical.Logit$node==unique.node[node]),]
autocorrelations <- acf(Empirical.Logit.trial.node$empirical.logit,
lag.max = time.lag.max, plot=FALSE)
autocorrelations <- autocorrelations$acf[2:(time.lag.max + 1)]
partial.autocorrelations <- pacf(Empirical.Logit.trial.node$empirical.logit,
lag.max = time.lag.max, na.action=na.pass, plot=FALSE)
partial.autocorrelations <- c(partial.autocorrelations$acf)
for (time.lag in 1:time.lag.max){
AC.PAC[(row.index + time.lag - 1),] <- c(unique.trial[trial], unique.node[node], time.lag,
autocorrelations[time.lag], partial.autocorrelations[time.lag])
}
row.index <- row.index + time.lag.max
}}
row.index <- 1
for (trial in 1:length(unique.trial)){
for (node in 1:length(unique.node)){
Empirical.Logit.trial.node <- Empirical.Logit[(Empirical.Logit$trial==unique.trial[trial]
& Empirical.Logit$node==unique.node[node]),]
autocorrelations <- acf(Empirical.Logit.trial.node$empirical.logit,
lag.max = time.lag.max, plot=FALSE)
autocorrelations <- autocorrelations$acf[2:(time.lag.max + 1)]
partial.autocorrelations <- pacf(Empirical.Logit.trial.node$empirical.logit,
lag.max = time.lag.max, na.action=na.pass, plot=FALSE)
partial.autocorrelations <- c(partial.autocorrelations$acf)
for (time.lag in 1:time.lag.max){
AC.PAC[(row.index + time.lag - 1),] <- c(unique.trial[trial], unique.node[node], time.lag,
autocorrelations[time.lag], partial.autocorrelations[time.lag])
}
row.index <- row.index + time.lag.max
}}
View(Practice_xls)
View(Practice_xls)
knitr::opts_chunk$set(echo = TRUE)
#to load data
library(readxl)
#to manipulate data, dplyr, purr, etc and to plot w ggplot2
library(tidyverse)
#Plot tree structure
library(data.tree)
#Frequentist multilevel models
library(lme4)
#Bayesian multilevel models
library(brms)
#pretty plots
library(sjPlot)
my_files = list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv)
library(readr)
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv)
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv)
my_files = list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv)
#Set the name of each list element to its
# respective file name. Note full.names = FALSE to
# get only the file names, not the full path.
names(all_csv) <- gsub(".csv","",
list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data",full.names = FALSE),
fixed = TRUE)
setwd("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
my_files = list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv)
#Set the name of each list element to its
# respective file name. Note full.names = FALSE to
# get only the file names, not the full path.
names(all_csv) <- gsub(".csv","",
list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data",full.names = FALSE),
fixed = TRUE)
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv)
setwd("~/GitHub/DR2/Specific aim 2/Academy of Aphasia")
setwd("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv)
knitr::opts_chunk$set(echo = TRUE)
my_files = list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv)
#to load data
library(readxl)
library(readr)
#to manipulate data, dplyr, purr, etc and to plot w ggplot2
library(tidyverse)
#Plot tree structure
library(data.tree)
#Frequentist multilevel models
library(lme4)
#Bayesian multilevel models
library(brms)
#pretty plots
library(sjPlot)
setwd("~/GitHub/DR2/Specific aim 2/Practice MPT/Practice_data")
#load data
library(readxl)
Practice_xls_withpractice <- read_excel("Participant2.xlsx")
library(readxl)
Participant2 <- read_excel("Participant2.xlsx")
View(Participant2)
#Practice_xls_withpractice <- read_excel("Participant2.xlsx")
#df <- read_excel("Participant2.xlsx") %>%
#  filter(condition != "practice")
df = practice_xls %>% filter(condition != "practice")
#Practice_xls_withpractice <- read_excel("Participant2.xlsx")
#df <- read_excel("Participant2.xlsx") %>%
#  filter(condition != "practice")
df = Participant2 %>% filter(condition != "practice")
df2 = df %>%
rename(aoi1 = RIGHT_IA_1_SAMPLE_COUNT) %>%
rename(aoi2 = RIGHT_IA_2_SAMPLE_COUNT) %>%
rename(aoi3 = RIGHT_IA_3_SAMPLE_COUNT) %>%
rename(aoi4 = RIGHT_IA_4_SAMPLE_COUNT)
#Following schmit et al, change all values below 5ms to 0 and above to 10 (pg 14, table expalnation.
df2$aoi1 = ifelse(df2$aoi1 < 5, 10, 0)
df2$aoi2 = ifelse(df2$aoi2 < 5, 10, 0)
df2$aoi3 = ifelse(df2$aoi3 < 5, 10, 0)
df2$aoi4 = ifelse(df2$aoi4  < 5, 10, 0)
#create single column showing what aoi participant was looking at
df2$aoi_all = ifelse(df2$aoi1 > 0, 1,
ifelse(df2$aoi2 > 0, 2,
ifelse(df2$aoi3 > 0, 3,
ifelse(df2$aoi4 > 0,4, 0))))
df2$y_5 = ifelse(df2$aoi_all == df2$unrelated_location, 2,
ifelse(df2$aoi_all == df2$phonemic_location, 4,
ifelse(df2$aoi_all == df2$semantic_location, 3,
ifelse(df2$aoi_all == df2$target_location, 1, 0))))
# yy.list is the hierachical structure of available steps in the tree model.
library(tidyr)
df2 = df2 %>%
mutate(y =  na_if(y_5, 0)) %>%
fill(y, .direction = "up")
df3 = data.frame(
trial = df2$TRIAL_INDEX,
person = rep(2, nrow(df2)),
time = df2$BIN_START_TIME,
item = df2$targetword,
y = df2$y
)
number.of.nodes <- 3
for (node in 1:number.of.nodes){
data.copy <- df3
data.copy$node <- rep(node, nrow(df3))
if (node==1){data.node <- data.copy} else {data.node <- rbind(data.node,data.copy)}
}
#Sanity check make sure we did the missing data transformation correct
#does step 1 result in missing data in the form of numerical value 0? (yes)
unique(df2$aoi_all)
#Does step 2 result in missing data in the form of numerical value 0? (yes)
unique(df2$y_5)
#does step 3 remove na in the form of zero and replace with nedxt highest number in teh sequence? (yes)
NA_check = data.frame(df2$y_5, df3$y)
data.node$yy = ifelse(data.node$node== 1 & data.node$y < 4, 1,  #node 1 and correct (sem, unrelated, correct)
ifelse(data.node$node== 1 & data.node$y == 4, 0, #node 1 and phon distractor
ifelse(data.node$node== 2 & data.node$y == 4, NA, #node 2 and phonological comp
ifelse(data.node$node== 2 & data.node$y == 3, 0, #node 2 and phonological comp
ifelse(data.node$node== 2 & data.node$y < 3, 1,  #node 2 and unrelated or correct
ifelse(data.node$node== 3 & data.node$y > 2, NA, #node 3 and y = phonological or semantic competitor
ifelse(data.node$node== 3 & data.node$y == 2, 0, 1 #node 3 and unrelated competitor, if not unrelated then correct
)))))))
unique(data.node$yy)
data.node.original <- data.node <- data.node[order(data.node$node, data.node$person, data.node$trial, data.node$time),]
data.node <- data.node[order(data.node$node, data.node$person, data.node$trial, data.node$time),]
#create variables to use later
data.node$time.coded <-  data.node$time.coded.centered <- rep(0,nrow(data.node))
node1_df = data.node %>%
filter(node == 1)
node1_df$t = ifelse(node1_df$y != 4, 1,0)
node1_df$c = ifelse(node1_df$y !=1,1,0)
node2_df = data.node %>%
filter(node == 2)
node2_df$t = ifelse(node2_df$y == !3, 1,0)
node2_df$c = ifelse(node2_df$y !=1,1,0)
node3_df = data.node %>%
filter(node == 3)
node3_df$t = ifelse(node3_df$y == 1, 1,0)
node3_df$c = ifelse(node3_df$y !=1, 1,0)
data.node = rbind(node1_df, node2_df, node3_df)
#SANITY CHECK: ARE THERE NOW 3 NODES AGAIN?
unique(data.node$node)
View(node1_df)
