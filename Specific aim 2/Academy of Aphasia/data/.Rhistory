range =c(0, 0.5)),
xaxis = list(title = "Ability")) %>%
add_trace(name = 'Test Information')
subplot(fig1, fig2, nrows = 2)
})
output$p3.2 <- renderPlotly({
fig2 = plot_ly(sem_df50(), x = ~ability, y = ~SEM, mode = 'lines',
hooverinfo = 'text',
text = ~paste(
'</br> Lower 95% CI: ', upperCI,
'</br> Upper 95% CI ', lowerCI)) %>%
layout(xaxis = list(showgrid = F),
yaxis = list(title = 'SEM', showgrid = F)) %>%
add_trace(name = 'SEM')
fig1 = plot_ly(sem_df50(), x = ~ability, y = ~total_info, mode = 'lines')
fig1 = fig1 %>%layout(title = "Test Information Function (Upper); SEM (Lower) <br> n = 50",
yaxis = list(title = 'Information'),
xaxis = list(title = "Ability")) %>%
add_trace(name = 'Test Information')
subplot(fig1, fig2, nrows = 2)
})
output$p3.3 <- renderPlotly({
fig2 = plot_ly(sem_df100(), x = ~ability, y = ~SEM, mode = 'lines',
hooverinfo = 'text',
text = ~paste(
'</br> Lower 95% CI: ', upperCI,
'</br> Upper 95% CI ', lowerCI)) %>%
layout(xaxis = list(showgrid = F),
yaxis = list(title = 'SEM', showgrid = F),
hovermode = "x uninifed") %>%
add_trace(name = 'SEM')
fig1 = plot_ly(sem_df100(), x = ~ability, y = ~total_info, mode = 'lines')
fig1 = fig1 %>%layout(title = "Test Information Function (Upper); SEM (Lower) <br> n = 100",
yaxis = list(title = 'Information'),
xaxis = list(title = "Ability")) %>%
add_trace(name = 'Test Information')
subplot(fig1, fig2, nrows = 2)
})
output$p3.4 <- renderPlotly({
fig2 = plot_ly(sem_df175(), x = ~ability, y = ~SEM, mode = 'lines') %>%
layout(xaxis = list(showgrid = F),
yaxis = list(title = 'SEM', showgrid = F) %>%
add_trace(name = 'SEM',
hovertemplate = 'SEM = %{SEM}',
'</br> Lower 95% CI: , %{lowerCI}',
'</br> Upper 95% CI: , %{upperCI}'))
fig1 = plot_ly(sem_df1(), x = ~ability, y = ~total_info, mode = 'lines')
fig1 = fig1 %>%layout(title = "Test Information Function (Upper); SEM (Lower) <br> n = 175",
yaxis = list(title = 'Information'),
xaxis = list(title = "Ability")) %>%
add_trace(name = 'Test Information')
subplot(fig1, fig2, nrows = 2)
})
}
####################################################
####################################################
shinyApp(ui = ui, server = server)
library(tidyverse)
df <- tibble(
a = rnorm(100, 5, 1),
b = a + rnorm(100, 0, .5)
)
df %>%
ggplot(aes(a, b)) +
geom_point()
ggsave('plot.png', dpi = 300, height = 5, width = 5, unit = 'in')
1500/5
ggsave('plot.png', dpi = 300, height = 6, width = 6, unit = 'in')
library(brms)
warnings()
install.packages('brms')
install.packages("brms")
detach("package:brms", unload = TRUE)
install.packages("brms")
warnings()
library(readxl)
tufaq <- read_excel("C:/Users/alexa/Downloads/tufaq.xlsx",
col_types = c("text"))
View(tufaq)
library(dplyr)
tufaq$AQval = as.numeric(tufaq$AQ)
View(tufaq)
library(readxl)
tufaq <- read_excel("C:/Users/alexa/Downloads/tufaq.xlsx",
col_types = c("text"))
View(tufaq)
tufaq$AQval = as.numeric(tufaq$AQ)
summary(tufaq)
load("C:/Users/alexa/Dropbox/TUF Meta Analysis/Quique and Swiderski working R  document/ModelOutput.RData")
View(cate)
data %>% summaraize()
data %>% summarize()
odds = ln(.37)
odds = exp(.37)
odds / 1 + odds
odds = exp(.04)
odds / 1 + odds
odds / (1 + odds)
odds
setwd("C:/Users/alexa/Dropbox")
library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
library(plotly)
###############data#################
#read data
library(readxl)
#mac
#hinydata <- read_excel("~/Dropbox/shinydata.xlsx")
#pc
shinydata <- read_excel("shinydata.xlsx")
data = shinydata
#create random number to randomize number of draws shown later on
set.seed(8675309)
shinydata$randomize = sample(seq(1,175, length.out = 175))
#MAKE VECTOR OF ABILITY
ability = seq(-4,4, length.out = 100)
#expand grid
item = shinydata$Item
df = expand.grid(ability, item)
library(dplyr)
runApp('Fergadiotis et al 2021 IRT ap_GF_AS.R')
shiny::runGitHub("rbcavanaugh/pnt")
remotes::install_github("rbcavanaugh/pnt")
remotes::install_github("rbcavanaugh/pnt")
library(pnt)
remove.packages("pnt")
remotes::install_github("rbcavanaugh/pnt")
library('pnt')
runPNT()
remotes::install_github("rbcavanaugh/pnt")
library(pnt)
runPNT()
setwd("~/GitHub/DR2/Specific aim 2/Practice MPT/Practice_data")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(dplyr)
library(ggplot2)
library(lme4)
library(readxl)
library(dagitty)
#install.packages('ggdag')
library(ggdag)
library(data.tree)
library(readxl)
Practice_xls <- read_excel("Participant2.xlsx") %>%
filter(condition != "practice")
df = Practice_xls %>%
filter(RIGHT_IA_0_SAMPLE_COUNT < 1)
#Create tree structure
TreeStructure = Node$new("Phonological Input: y*tlji1")
UnrelComp = TreeStructure$AddChild("Unrelated Competitor (ytlji = 4)")
PhonProcessing = TreeStructure$AddChild("Phonological Processing (y*tlji2)")
TreeStructure$AddChildNode(PhonProcessing)
PhonComp = PhonProcessing$AddChild("Phonological Competitor (ytlji = 3)")
SemProcessing = PhonProcessing$AddChild("Semantic Processing (y*tlji3)")
PhonProcessing$AddChildNode(SemProcessing)
SemComp = SemProcessing$AddChild("Semantic Competitor (ytlji = 2)")
Target = SemProcessing$AddChild("Target (ytlji = 1)")
#Add Probabilities
print(TreeStructure, "p")
Do(TreeStructure$leaves, function(node) SetNodeStyle(node, shape = "rectangle"))
plot(TreeStructure)
df2 = df %>%
rename(aoi1 = RIGHT_IA_1_SAMPLE_COUNT) %>%
rename(aoi2 = RIGHT_IA_2_SAMPLE_COUNT) %>%
rename(aoi3 = RIGHT_IA_3_SAMPLE_COUNT) %>%
rename(aoi4 = RIGHT_IA_4_SAMPLE_COUNT)
#Following schmit et al, change all values below 5ms to 0 and above to 10 (pg 14, table expalnation.
df2$aoi1 = ifelse(df2$aoi1 < 5, 10, 0)
df2$aoi2 = ifelse(df2$aoi2 < 5, 10, 0)
df2$aoi3 = ifelse(df2$aoi3 < 5, 10, 0)
df2$aoi4 = ifelse(df2$aoi4  < 5, 10, 0)
#create single column showing what aoi participant was looking at
df2$aoi_all = ifelse(df2$aoi1 > 0, 1,
ifelse(df2$aoi2 > 0, 2,
ifelse(df2$aoi3 > 0, 3,
ifelse(df2$aoi4 > 0,4, 0))))
df2$y_5 = ifelse(df2$aoi_all == df2$unrelated_location, 4,
ifelse(df2$aoi_all == df2$phonemic_location, 3,
ifelse(df2$aoi_all == df2$semantic_location, 2,
ifelse(df2$aoi_all == df2$target_location, 1, 0))))
# yy.list is the hierachical structure of available steps in the tree model.
library(tidyr)
df2 = df2 %>%
mutate(y =  na_if(y_5, 0)) %>%
fill(y, .direction = "up")
df3 = data.frame(
trial = df2$TRIAL_INDEX,
person = rep(2, nrow(df2)),
time = df2$BIN_START_TIME,
item = df2$targetword,
y = df2$y
)
#Sanity check make sure we did the missing data transformation correct
#does step 1 result in missing data in the form of numerical value 0? (yes)
unique(df2$aoi_all)
#Does step 2 result in missing data in the form of numerical value 0? (yes)
unique(df2$y_5)
#does step 3 remove na in the form of zero and replace with nedxt highest number in teh sequence? (yes)
NA_check = data.frame(df2$y_5, df3$y)
#Duplicate data for the number of nodes
number.of.nodes <- 3
for (node in 1:number.of.nodes){
data.copy <- df3
data.copy$node <- rep(node, nrow(df3))
if (node==1){data.node <- data.copy} else {data.node <- rbind(data.node,data.copy)}
}
data.node$yy = ifelse(data.node$node== 1 & data.node$y == 1, 1, #node 1 and correct
ifelse(data.node$node== 1 & data.node$y == 2, 1, #node 2 and semantic comp
ifelse(data.node$node== 1 & data.node$y == 3, 1, #node 3 and phonological comp
ifelse(data.node$node== 1 & data.node$y == 4, 0, #node 4 and unrelated comp
ifelse(data.node$node== 2 & data.node$y == 1, 1, #node 1 and correct
ifelse(data.node$node== 2 & data.node$y == 2, 1, #node 2 and semantic comp
ifelse(data.node$node== 2 & data.node$y == 3, 0, #node 3 and phonological comp
ifelse(data.node$node== 2 & data.node$y == 4, NA,  #node 4 and unrelated comp
ifelse(data.node$node== 3 & data.node$y == 1, 1, #node 1 and correct
ifelse(data.node$node== 3 & data.node$y == 2, 0, #node 2 and semantic comp
ifelse(data.node$node== 3 & data.node$y == 3, NA, #node 3 and phonological comp
ifelse(data.node$node== 3 & data.node$y == 4, NA, -999#node 4 and unrelated comp
))))))))))))
unique(data.node$yy)
data.el = data.frame(
trial = data.node$trial,
person = data.node$person,
time = data.node$time,
node = data.node$node,
yy = data.node$yy
)
head(data.el)
library(dplyr)
EL2 = data.el %>%
group_by(node, trial, person) %>%
na.omit() %>%
mutate(n_yy = sum(yy)) %>%
mutate(n_obs = length(unique(time))) %>%
mutate(prop_yy = n_yy/n_obs) %>%
select(time, person, trial, yy, node, n_yy, n_obs, prop_yy)
Empirical.Logit = data.frame(
trial = as.factor(EL2$trial),
time = as.numeric(EL2$time),
node = as.factor(EL2$node),
person = as.numeric(EL2$person),
estimate = log(EL2$prop_yy + 0.5) / ((EL2$n_obs - EL2$n_yy) + 0.5))
unique(Empirical.Logit$estimate)
View(EL2)
knitr::opts_chunk$set(echo = TRUE)
#to load data
library(readxl)
#to manipulate data, dplyr, purr, etc and to plot w ggplot2
library(tidyverse)
#Plot tree structure
library(data.tree)
#Frequentist multilevel models
library(lme4)
#Bayesian multilevel models
library(brms)
#pretty plots
library("sjPlot")
setwd("~/GitHub/DR2/Specific aim 2/Practice MPT/Practice_data")
#to load data
library(readxl)
#to manipulate data, dplyr, purr, etc and to plot w ggplot2
library(tidyverse)
#Plot tree structure
library(data.tree)
#Frequentist multilevel models
library(lme4)
#Bayesian multilevel models
library(brms)
#pretty plots
library("sjPlot")
intstall.packages('rio')
install.packages('rio')
library(rio)
setwd("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
my_data <- import_list(dir("path_to_directory", pattern = ".xls"), rbind = TRUE)
my_data <- import_list(dir(pattern = ".xls"), rbind = TRUE)
library(readxl)
my_data <- import_list(dir(pattern = ".xls"), rbind = TRUE)
my_data <- import_list(dir("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data", pattern = ".xls"), rbind = TRUE)
my_data <- import_list(dir("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data", pattern = ".xls"), rbind = FALSE)
my_data <- import_list(dir("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data", pattern = ".xls"), cbind = TRUE, rbind = FALSE)
unlist(my_data)
View(my_data)
my_data[["3086_02-1_Onset-to-mouseclick"]]
p <- ""~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data""
p <- "~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data"
files <- list.files(p, pattern="xls", full.names=TRUE) %>%
set_names()
merged <- files %>% map_dfr(read_excel, .id="filename")
my_data <- import_list(dir("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data", pattern = ".csv"), rbind = FALSE)
View(my_data)
p <- "~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data"
files <- list.files(p, pattern="csv", full.names=TRUE) %>%
set_names()
merged <- files %>% map_dfr(read_csv, .id="filename")
setwd("~/GitHub/DR2/Specific aim 2/Academy of Aphasia")
setwd("~/GitHub/DR2/Specific aim 2/Practice MPT/Practice_data")
#load data
library(readxl)
Practice_xls_withpractice <- read_excel("Participant2.xlsx")
Practice_xls <- read_excel("Participant2.xlsx") %>%
filter(condition != "practice")
library(readxl)
Participant2 <- read_excel("Participant2.xlsx")
View(Participant2)
#to load data
library(readxl)
#to manipulate data, dplyr, purr, etc and to plot w ggplot2
library(tidyverse)
#Plot tree structure
library(data.tree)
#Frequentist multilevel models
library(lme4)
#Bayesian multilevel models
library(brms)
#pretty plots
library("sjPlot")
practice_xls = Participant2 %>% filter(condition != "practice")
#Create tree structure
TreeStructure = Node$new("Phonological Input: y*tlji1")
UnrelComp = TreeStructure$AddChild("Phonological Competitor (ytlji = 4)")
PhonProcessing = TreeStructure$AddChild("Phonological Processing (y*tlji2)")
TreeStructure$AddChildNode(PhonProcessing)
PhonComp = PhonProcessing$AddChild("Semantic Competitor (ytlji = 3)")
SemProcessing = PhonProcessing$AddChild("Semantic Processing (y*tlji3)")
PhonProcessing$AddChildNode(SemProcessing)
SemComp = SemProcessing$AddChild("Unrelated Competitor (ytlji = 2)")
Target = SemProcessing$AddChild("Target (ytlji = 1)")
#Add Probabilities
print(TreeStructure, "p")
Do(TreeStructure$leaves, function(node) SetNodeStyle(node, shape = "rectangle"))
plot(TreeStructure)
#Practice_xls_withpractice <- read_excel("Participant2.xlsx")
#df <- read_excel("Participant2.xlsx") %>%
#  filter(condition != "practice")
df = practice_xls
df2 = df %>%
rename(aoi1 = RIGHT_IA_1_SAMPLE_COUNT) %>%
rename(aoi2 = RIGHT_IA_2_SAMPLE_COUNT) %>%
rename(aoi3 = RIGHT_IA_3_SAMPLE_COUNT) %>%
rename(aoi4 = RIGHT_IA_4_SAMPLE_COUNT)
#Following schmit et al, change all values below 5ms to 0 and above to 10 (pg 14, table expalnation.
df2$aoi1 = ifelse(df2$aoi1 < 5, 10, 0)
df2$aoi2 = ifelse(df2$aoi2 < 5, 10, 0)
df2$aoi3 = ifelse(df2$aoi3 < 5, 10, 0)
df2$aoi4 = ifelse(df2$aoi4  < 5, 10, 0)
#create single column showing what aoi participant was looking at
df2$aoi_all = ifelse(df2$aoi1 > 0, 1,
ifelse(df2$aoi2 > 0, 2,
ifelse(df2$aoi3 > 0, 3,
ifelse(df2$aoi4 > 0,4, 0))))
df2$y_5 = ifelse(df2$aoi_all == df2$unrelated_location, 2,
ifelse(df2$aoi_all == df2$phonemic_location, 4,
ifelse(df2$aoi_all == df2$semantic_location, 3,
ifelse(df2$aoi_all == df2$target_location, 1, 0))))
# yy.list is the hierachical structure of available steps in the tree model.
library(tidyr)
df2 = df2 %>%
mutate(y =  na_if(y_5, 0)) %>%
fill(y, .direction = "up")
df3 = data.frame(
trial = df2$TRIAL_INDEX,
person = rep(2, nrow(df2)),
time = df2$BIN_START_TIME,
item = df2$targetword,
y = df2$y
)
View(df3)
my_data <- import_list(dir("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data", pattern = ".csv"), rbind = TRUE)
View(my_data)
list2env(my_data ,.GlobalEnv)
library(rio)
#pretty plots
library(sjPlot)
my_data <- import_list(dir("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data", pattern = ".csv"), rbind = FALSE)
list2env(my_data ,.GlobalEnv)
View(my_data)
my_data <- import_list(dir("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data", pattern = ".csv"), rbind = FALSE)
View(my_data)
my_data <- import_list(dir("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data", pattern = ".csv"), rbind = TRUE)
View(my_data)
p <- "~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data"
files <- list.files(p, pattern="csv", full.names=TRUE) %>%
set_names()
merged <- files %>% map_dfr(read_csv, .id="filename")
my_data <- import_list(dir("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data",
pattern = ".csv"), rbind = TRUE)
my_data <- import_list(dir("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data",
pattern = ".csv"), rbind = TRUE)
library(rio)
my_data <- import_list(dir("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data",
pattern = ".csv"), rbind = TRUE)
my_data <- import_list(dir("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data",
pattern = ".csv"), rbind = FALSE)
View(my_data)
p <- "~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data"
files <- list.files(p, pattern="csv", full.names=TRUE) %>%
set_names()
library(tidyverse)
p <- "~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data"
files <- list.files(p, pattern="csv", full.names=TRUE) %>%
set_names()
merged <- files %>% map_dfr(read_csv, .id="filename")
list2env(my_data)
knitr::opts_chunk$set(echo = TRUE)
my_data <- import_list(dir("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data", pattern = ".csv"), rbind = FALSE)
list2env(my_data ,.GlobalEnv)
my_data <- import_list(dir("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data", pattern = ".csv"), rbind = TRUE)
my_files = list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
files <- list.files(p, pattern="csv", full.names=TRUE) %>%
set_names()
library(tidyverse)
files <- list.files(p, pattern="csv", full.names=TRUE) %>%
set_names()
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv,...)
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv)
my_files = list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
my_files = list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv)
setwd("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv)
#Set the name of each list element to its
# respective file name. Note full.names = FALSE to
# get only the file names, not the full path.
names(all_csv) <- gsub(".csv","",
list.files("path/to/files",full.names = FALSE),
fixed = TRUE)
View(all_csv)
#Set the name of each list element to its
# respective file name. Note full.names = FALSE to
# get only the file names, not the full path.
names(all_csv) <- gsub(".csv","",
list.files("path/to/files",full.names = TRUE),
fixed = TRUE)
View(all_csv)
my_files = list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv)
#Set the name of each list element to its
# respective file name. Note full.names = FALSE to
# get only the file names, not the full path.
names(all_csv) <- gsub(".csv","",
list.files("path/to/files",full.names = TRUE),
fixed = TRUE)
View(all_csv)
#Set the name of each list element to its
# respective file name. Note full.names = FALSE to
# get only the file names, not the full path.
names(all_csv) <- gsub(".csv","",
list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data",full.names = TRUE),
fixed = TRUE)
View(all_csv)
View(all_csv)
#Set the name of each list element to its
# respective file name. Note full.names = FALSE to
# get only the file names, not the full path.
names(all_csv) <- gsub("/GitHub/DR2/Specific aim 2/Academy of Aphasia/data","",
list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data",full.names = TRUE),
fixed = TRUE)
View(all_csv)
all_csv[["C:/Users/Brahma/Documents/p02_01.csv"]]
.csv
p <- "~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data"
files <- list.files(p, pattern="csv", full.names=TRUE) %>%
set_names()
merged <- files %>% map_dfr(read_csv, .id="filename")
my_files = list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv)
#Set the name of each list element to its
# respective file name. Note full.names = FALSE to
# get only the file names, not the full path.
names(all_csv) <- gsub(".csv","",
list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data",full.names = FALSE),
fixed = TRUE)
View(all_csv)
knitr::opts_chunk$set(echo = TRUE)
my_files = list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv)
my_files = list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv)
setwd("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv)
my_files = list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv)
#Set the name of each list element to its
# respective file name. Note full.names = FALSE to
# get only the file names, not the full path.
names(all_csv) <- gsub(".csv","",
list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data",full.names = FALSE),
fixed = TRUE)
my_files = list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv)
knitr::opts_chunk$set(echo = TRUE)
my_files = list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv)
??lapply
#to manipulate data, dplyr, purr, etc and to plot w ggplot2
library(tidyverse)
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv)
