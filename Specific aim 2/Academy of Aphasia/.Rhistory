mutate(t = ifelse(y == 1, 1,0)) %>%
mutate(c = ifelse(y !=1,1,0))
node3_df = data.node %>%
filter(node == 3)%>%
rename(item = Target_actual) %>%
mutate(t = ifelse(y == 1, 1,0)) %>%
mutate(c = ifelse(y !=1,1,0))
data.node = rbind(node1_df, node2_df, node3_df)
#SANITY CHECK: ARE THERE NOW 3 NODES AGAIN?
unique(data.node$node)
data.node = data.node %>%
arrange(node) %>%
group_by(node, id, item) %>%
mutate(t.lag = lag(t)) %>%
mutate(c.lag = lag(c)) %>%
mutate(yy.lag = lag(yy))%>%
group_by() %>%
mutate(time.coded.center = scale(BIN_START_TIME)) %>%
filter(!is.na(t.lag)) %>%
filter(!is.na(yy.lag))
#SANITY CHECK: Check to make sure t.lag, c.lag, nor yy.lag include NA
summary(data.node)
# create correct variable structures
data.node$yy.lag <- as.numeric(data.node$yy.lag)
data.node$t.lag <- as.numeric(data.node$t.lag)
data.node$c.lag <- as.numeric(data.node$c.lag)
data.node$time.coded <- as.numeric(data.node$BIN_START_TIME)
data.node$time.coded.centered <- as.numeric(data.node$time.coded.center)
data.node$item <- as.factor(data.node$item)
data.node$person <- as.factor(data.node$id)
data.node$trial <- as.factor(data.node$TRIAL_INDEX)
data.node$node <- as.factor(data.node$node)
data.node$node.1 <- as.factor(data.node$node.1)
data.node$node.2 <- as.factor(data.node$node.2)
data.node$node.3 <- as.factor(data.node$node.3)
data.node$obs <- seq(1,nrow(data.node))
View(data.node)
View(df2)
View(df2)
View(df2.5)
View(df3_check)
View(df3)
library(readr)
#to manipulate data, dplyr, purr, etc and to plot w ggplot2
library(tidyverse)
#Bayesian multilevel models
library(brms)
#pretty plots
library(stargazer)
#intepretation and plotting
library(tidybayes)
d = read_csv("analysisDf.csv")
d$node = as.factor(d$node)
#remove node 2 and 3 (doesnt matter what node is actually removed, just dont want triplicated data)
d2 = d %>%
filter(node  == "node.1")
View(d2)
unique(d$node)
#remove node 2 and 3 (doesnt matter what node is actually removed, just dont want triplicated data)
d2 = d %>%
filter(node  == 1)
setwd("C:/Users/alexa/Dropbox/BoyleAkersDiscourseAnalysis/SVO Rel CU Conversation")
library(readxl)
library(tidyverse)
library(gghighlight)
library(brms)
library(performance)
library(patchwork)
library(RColorBrewer)
library(insight)
library(tidybayes)
library(ggridges)
library(knitr)
library(DHARMa)
library(future)
library(mice)
library(tidyverse) # needed for data manipulation.
library(RColorBrewer) # needed for some extra colours in one of the graphs
library(ggmcmc)
library(ggthemes)
data = read_excel("Copy of CU free conversation dataset raw numbers.xlsx")
View(data)
data2 = data %>%
pivot_wider(names_from = c("Variable"),
values_from = "PWAScore")
View(data2)
data2 = data2 %>%
group_by(Participant, TimePoint, Group, COP, Age, MPO, WABAQ, SPICA) %>%
summarise(SVO = sum(SVO,na.rm = TRUE), Rel = sum(Rel,na.rm = TRUE),
CU = sum(CU,na.rm = TRUE), TotUtt = sum(TotUtt,na.rm = TRUE))
View(data2)
View(data2)
View(data)
data2 = data %>%
pivot_wider(names_from = c("Variable"),
values_from = "PWAScore")
View(data)
View(data2)
View(data)
data = read_excel("Copy of CU free conversation dataset raw numbers.xlsx")
data2 = data %>%
pivot_wider(names_from = c("Variable"),
values_from = "PWAScore")
View(data2)
View(data)
data2 = data2 %>%
group_by(Participant, TimePoint, Group, COP, Age, MPO, WABAQ, SPICA) %>%
summarise(SVO = sum(SVO,na.rm = TRUE), Rel = sum(Rel,na.rm = TRUE),
CU = sum(CU,na.rm = TRUE), TotUtt = sum(TotUtt,na.rm = TRUE))
View(data2)
View(data2)
View(data2)
View(data2)
library(readr)
#to manipulate data, dplyr, purr, etc and to plot w ggplot2
library(tidyverse)
#Bayesian multilevel models
library(brms)
library(cmdstanr)
#pretty plots
library(stargazer)
#intepretation and plotting
library(tidybayes)
#load formatted data
d = read_csv("analysisDf.csv")
d$yy.lag <- as.numeric(d$yy.lag)
d$t.lag <- as.numeric(d$t.lag)
d$c.lag <- as.numeric(d$c.lag)
d$time.coded <- as.numeric(d$BIN_START_TIME)
d$time.coded.centered <- as.numeric(d$time.coded.center)
d$item <- as.factor(d$item)
d$person <- as.factor(d$id)
d$trial <- as.factor(d$TRIAL_INDEX)
d$node <- as.factor(d$node)
d$node.1 <- as.factor(d$node.1)
d$node.2 <- as.factor(d$node.2)
d$node.3 <- as.factor(d$node.3)
d$obs <- seq(1,nrow(d))
#remove node 2 and 3 (doesnt matter what node is actually removed, just dont want triplicated data)
d2 = d %>%
filter(node  == 1)
#Create outcome variables
d2$correct = ifelse(d2$y == 1, 1, 0)
d2$unrelated = ifelse(d2$y == 2, 1, 0)
d2$phonological = ifelse(d2$y == 4, 1, 0)
d2$semantic = ifelse(d2$y == 3,1,0)
#create trial level variable for bin number
d3 = d2 %>%
mutate(sum_var = rep(1, nrow(d2)))
d3 = d3 %>%
group_by(item, person, Session) %>%
mutate(n_bins = sum(sum_var)) %>%
mutate(n_cor = sum(correct)) %>%
mutate(n_phon = sum(phonological)) %>%
mutate(n_sem = sum(semantic)) %>%
mutate(n_unrel = sum(unrelated)) %>%
mutate(pctCor = n_cor/n_bins) %>%
mutate(pctPhon = n_phon/n_bins) %>%
mutate(pctSem = n_sem/n_bins) %>%
mutate(pctUnrel = n_unrel/n_bins) %>%
mutate(time = time.coded/50)
d3$Session = as.factor(d3$Session)
zoib_correct = bf(pctCor ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
phi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
zoi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
coi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item))
zoib_semantic = bf(semantic ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
phi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
zoi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
coi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item))
zoib_phonological= bf(phonological ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
phi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
zoi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
coi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item))
zoib_unrelated = bf(phonological ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
phi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
zoi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
coi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item))
#set priors
priors <- c(set_prior("student_t(3, 0, 2.5)", class = "Intercept"),
set_prior("normal(0, 2.5)", class = "b"))
mv_zoib <- brm( zoib_correct + zoib_phonological + zoib_semantic + zoib_unrelated,
family = zero_one_inflated_beta(),
data = d3,
init = "0",
prior = c(prior(normal(0, 3), class = Intercept),
prior(normal(0,2.5), class = b),
prior(normal(0,2.5), class = sd)),
cores = 4,
threads = threading(16),
iter = 10,
chains = 1,
seed = 1,
backend = "cmdstanr")
zoib_correct = bf(pctCor ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
phi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
zoi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
coi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item))
zoib_semantic = bf(pctSem ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
phi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
zoi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
coi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item))
zoib_phonological= bf(pctPhon ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
phi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
zoi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
coi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item))
zoib_unrelated = bf(pctUnrel ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
phi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
zoi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item),
coi ~ aud_syn*time + aud_rhyme*time +
Session + (1|person) + (1|item))
starttime = timestamp()
##------ Wed May 11 16:10:09 2022 ------##
mv_zoib <- brm(zoib_correct + zoib_phonological + zoib_semantic + zoib_unrelated,
family = zero_one_inflated_beta(),
data = d3,
init = "0",
prior = c(prior(normal(0, 3), class = Intercept),
prior(normal(0,2.5), class = b),
prior(normal(0,2.5), class = sd)),
cores = 4,
threads = threading(16),
iter = 10,
chains = 1,
seed = 1,
backend = "cmdstanr")
get_prior(zoib_correct + zoib_phonological + zoib_semantic + zoib_unrelated,
family = zero_one_inflated_beta(),
data = d3)
mv_zoib <- brm(zoib_correct + zoib_phonological + zoib_semantic + zoib_unrelated,
family = zero_one_inflated_beta(),
data = d3,
init = "0",
prior = c(prior(normal(0, 3), class = Intercept),
prior(normal(0,2.5), class = b, resp = pctCor),
prior(normal(0,2.5), class = sd)),
cores = 4,
threads = threading(16),
iter = 10,
chains = 1,
seed = 1,
backend = "cmdstanr")
#assign priors
priors <- c(set_prior("normal(0, 2.5)",
class = "b",
resp = c("pctCor","pctPhon","pctUnrel", "pctSem")),
set_prior("normal(0,10)",
class = "Intercept",
resp = c("pctCor","pctPhon","pctUnrel", "pctSem")),
set_prior("normal(0,5)",
class = "sd",
resp = c("pctCor","pctPhon","pctUnrel", "pctSem")))
mv_zoib <- brm(zoib_correct + zoib_phonological + zoib_semantic + zoib_unrelated,
family = zero_one_inflated_beta(),
data = d3,
init = "0",
prior = priors,
cores = 4,
threads = threading(16),
iter = 10,
chains = 1,
seed = 1,
backend = "cmdstanr")
library(readr)
#to manipulate data, dplyr, purr, etc and to plot w ggplot2
library(dplyr)
#Bayesian multilevel models
library(brms)
library(cmdstanr)
#pretty plots
#library(stargazer)
#intepretation and plotting
#library(tidybayes)
#load formatted data
d = read_csv("analysisDf.csv")
d$yy.lag <- as.numeric(d$yy.lag)
d$t.lag <- as.numeric(d$t.lag)
d$c.lag <- as.numeric(d$c.lag)
d$time.coded <- as.numeric(d$BIN_START_TIME)
d$time.coded.centered <- as.numeric(d$time.coded.center)
d$item <- as.factor(d$item)
d$person <- as.factor(d$id)
d$trial <- as.factor(d$TRIAL_INDEX)
d$node <- as.factor(d$node)
d$node.1 <- as.factor(d$node.1)
d$node.2 <- as.factor(d$node.2)
d$node.3 <- as.factor(d$node.3)
d$obs <- seq(1,nrow(d))
#remove node 2 and 3 (doesnt matter what node is actually removed, just dont want triplicated data)
d2 = d %>%
filter(node  == 1)
#Create outcome variables
d2$correct = ifelse(d2$y == 1, 1, 0)
d2$unrelated = ifelse(d2$y == 2, 1, 0)
d2$phonological = ifelse(d2$y == 4, 1, 0)
d2$semantic = ifelse(d2$y == 3,1,0)
#create trial level variable for bin number
d3 = d2 %>%
mutate(sum_var = rep(1, nrow(d2)))
d3 = d3 %>%
group_by(item, person, Session) %>%
mutate(n_bins = sum(sum_var)) %>%
mutate(n_cor = sum(correct)) %>%
mutate(n_phon = sum(phonological)) %>%
mutate(n_sem = sum(semantic)) %>%
mutate(n_unrel = sum(unrelated)) %>%
mutate(pctCor = n_cor/n_bins) %>%
mutate(pctPhon = n_phon/n_bins) %>%
mutate(pctSem = n_sem/n_bins) %>%
mutate(pctUnrel = n_unrel/n_bins) %>%
mutate(time = time.coded/50)
d3$Session = as.factor(d3$Session)
View(d3)
s1 = d3 %>%
filter(Session == 1)
s2 = d3 %>%
filter(Session == 2)
length(unique(s1$person))
length(unique(s2$person))
unique(d3$person)
s2 = d3 %>%
filter(Session == 2)
zoib_correct = bf(pctCor ~ aud_syn*time + aud_rhyme*time +
(1|person) + (1|item),
phi ~ aud_syn*time + aud_rhyme*time +
(1|person) + (1|item),
zoi ~ aud_syn*time + aud_rhyme*time +
(1|person) + (1|item),
coi ~ aud_syn*time + aud_rhyme*time +
(1|person) + (1|item))
zoib_semantic = bf(pctSem ~ aud_syn*time + aud_rhyme*time +
(1|person) + (1|item),
phi ~ aud_syn*time + aud_rhyme*time +
(1|person) + (1|item),
zoi ~ aud_syn*time + aud_rhyme*time +
(1|person) + (1|item),
coi ~ aud_syn*time + aud_rhyme*time +
(1|person) + (1|item))
zoib_phonological= bf(pctPhon ~ aud_syn*time + aud_rhyme*time +
(1|person) + (1|item),
phi ~ aud_syn*time + aud_rhyme*time +
(1|person) + (1|item),
zoi ~ aud_syn*time + aud_rhyme*time +
(1|person) + (1|item),
coi ~ aud_syn*time + aud_rhyme*time +
(1|person) + (1|item))
zoib_unrelated = bf(pctUnrel ~ aud_syn*time + aud_rhyme*time +
(1|person) + (1|item),
phi ~ aud_syn*time + aud_rhyme*time +
(1|person) + (1|item),
zoi ~ aud_syn*time + aud_rhyme*time +
(1|person) + (1|item),
coi ~ aud_syn*time + aud_rhyme*time +
(1|person) + (1|item))
#assign priors
priors <- c(set_prior("normal(0, 2.5)",
class = "b",
resp = c("pctCor","pctPhon","pctUnrel", "pctSem")),
set_prior("normal(0,10)",
class = "Intercept",
resp = c("pctCor","pctPhon","pctUnrel", "pctSem")),
set_prior("normal(0,5)",
class = "sd",
resp = c("pctCor","pctPhon","pctUnrel", "pctSem")))
endtime = timestamp()
##------ Thu May 12 07:53:12 2022 ------##
mv_zoib <- brm(zoib_correct + zoib_phonological + zoib_semantic + zoib_unrelated,
family = zero_one_inflated_beta(),
data = s2,
init = "0",
prior = priors,
cores = 4,
control = list(adapt_delta = 0.91,
max_treedepth = 11),
threads = threading(16),
iter = 2000,
chains = 4,
seed = 1,
backend = "cmdstanr")
endtime = timestamp()
##------ Thu May 12 07:54:05 2022 ------##
mv_zoib <- brm(zoib_correct + zoib_phonological + zoib_semantic + zoib_unrelated,
family = zero_one_inflated_beta(),
data = s2,
init = "0",
prior = priors,
cores = 4,
control = list(adapt_delta = 0.91,
max_treedepth = 11),
threads = threading(16),
iter = 2000,
chains = 4,
seed = 1,
backend = "cmdstanr")
save(mv_zoib, file = "mv_zoib.rda")
endtime = timestamp()
##------ Thu May 12 15:38:45 2022 ------##
View(s2)
d3$pctCor
range(d3$pctSem)
range(d3$pctCor)
library(parallel)
parallel::detectCores()
zoib_correct = bf(pctCor ~ aud_syn + aud_rhyme +
(1|person) + (1|item),
phi ~ aud_syn + aud_rhyme +
(1|person) + (1|item),
zoi ~ aud_syn + aud_rhyme +
(1|person) + (1|item),
coi ~ aud_syn + aud_rhyme +
(1|person) + (1|item))
zoib_semantic = bf(pctSem ~ aud_syn + aud_rhyme +
(1|person) + (1|item),
phi ~ aud_syn + aud_rhyme +
(1|person) + (1|item),
zoi ~ aud_syn + aud_rhyme +
(1|person) + (1|item),
coi ~ aud_syn + aud_rhyme +
(1|person) + (1|item))
zoib_phonological= bf(pctPhon ~ aud_syn + aud_rhyme +
(1|person) + (1|item),
phi ~ aud_syn + aud_rhyme +
(1|person) + (1|item),
zoi ~ aud_syn + aud_rhyme +
(1|person) + (1|item),
coi ~ aud_syn + aud_rhyme +
(1|person) + (1|item))
zoib_unrelated = bf(pctUnrel ~ aud_syn + aud_rhyme +
(1|person) + (1|item),
phi ~ aud_syn + aud_rhyme +
(1|person) + (1|item),
zoi ~ aud_syn + aud_rhyme +
(1|person) + (1|item),
coi ~ aud_syn + aud_rhyme +
(1|person) + (1|item))
#assign priors
priors <- c(set_prior("normal(0, 2.5)",
class = "b",
resp = c("pctCor","pctPhon","pctUnrel", "pctSem")),
set_prior("normal(0,10)",
class = "Intercept",
resp = c("pctCor","pctPhon","pctUnrel", "pctSem")),
set_prior("normal(0,5)",
class = "sd",
resp = c("pctCor","pctPhon","pctUnrel", "pctSem")))
endtime = timestamp()
##------ Thu May 12 16:05:25 2022 ------##
mv_zoib <- brm(zoib_correct + zoib_phonological + zoib_semantic + zoib_unrelated,
family = zero_one_inflated_beta(),
data = s2,
init = "0",
prior = priors,
cores = 4,
control = list(adapt_delta = 0.91,
max_treedepth = 11),
threads = threading(12),
iter = 2000,
chains = 12,
seed = 1,
backend = "cmdstanr")
save(mv_zoib, file = "mv_zoib.rda")
#one observation per time point
final_df = s2 %>%
distinct(person, item, .keep_all = TRUE)
View(final_df)
View(final_df)
mv_zoib <- brm(zoib_correct + zoib_phonological + zoib_semantic + zoib_unrelated,
family = zero_one_inflated_beta(),
data = final_df,
init = "0",
prior = priors,
cores = 4,
control = list(adapt_delta = 0.91,
max_treedepth = 11),
threads = threading(12),
iter = 2000,
chains = 12,
seed = 1,
backend = "cmdstanr")
save(mv_zoib, file = "mv_zoib.rda")
summary(mv_zoib)
