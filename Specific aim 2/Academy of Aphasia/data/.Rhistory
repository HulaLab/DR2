ggtitle("Test Information Curve (Upper) Item Characteristic Curves (Lower)") +
theme(plot.title = element_text(hjust = 0.5))
a = ggplotly(a) #%>% layout(height = 1000)
b =  ggplot(data = item_df(), aes(x =ability, y= info, color = item)) +
geom_line() + #ylim(0, .8) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(legend.position = "none")
subplot(a, b, nrows = 2)
})
output$p3.1 <- renderPlotly({
fig2 = plot_ly(sem_df1(), x = ~ability, y = ~SEM,  mode = 'lines',
hooverinfo = "text",
text = ~paste(
'Ability: ', ability,
'SEM: ', SEM,
'</br> Lower 95% CI: ', upperCI,
'</br> Upper 95% CI ', lowerCI))
fig1 = plot_ly(sem_df1(), x = ~ability, y = ~total_info, mode = 'lines')
fig1 = fig1 %>%layout(title = "Test Information Function (Upper); SEM (Lower) <br> n = 1",
yaxis = list(title = 'Information',
range =c(0, 0.5)),
xaxis = list(title = "Ability")) %>%
add_trace(name = 'Test Information')
subplot(fig1, fig2, nrows = 2)
})
output$p3.2 <- renderPlotly({
fig2 = plot_ly(sem_df50(), x = ~ability, y = ~SEM, mode = 'lines',
hooverinfo = 'text',
text = ~paste(
'</br> Lower 95% CI: ', upperCI,
'</br> Upper 95% CI ', lowerCI)) %>%
layout(xaxis = list(showgrid = F),
yaxis = list(title = 'SEM', showgrid = F)) %>%
add_trace(name = 'SEM')
fig1 = plot_ly(sem_df50(), x = ~ability, y = ~total_info, mode = 'lines')
fig1 = fig1 %>%layout(title = "Test Information Function (Upper); SEM (Lower) <br> n = 50",
yaxis = list(title = 'Information'),
xaxis = list(title = "Ability")) %>%
add_trace(name = 'Test Information')
subplot(fig1, fig2, nrows = 2)
})
output$p3.3 <- renderPlotly({
fig2 = plot_ly(sem_df100(), x = ~ability, y = ~SEM, mode = 'lines',
hooverinfo = 'text',
text = ~paste(
'</br> Lower 95% CI: ', upperCI,
'</br> Upper 95% CI ', lowerCI)) %>%
layout(xaxis = list(showgrid = F),
yaxis = list(title = 'SEM', showgrid = F),
hovermode = "x uninifed") %>%
add_trace(name = 'SEM')
fig1 = plot_ly(sem_df100(), x = ~ability, y = ~total_info, mode = 'lines')
fig1 = fig1 %>%layout(title = "Test Information Function (Upper); SEM (Lower) <br> n = 100",
yaxis = list(title = 'Information'),
xaxis = list(title = "Ability")) %>%
add_trace(name = 'Test Information')
subplot(fig1, fig2, nrows = 2)
})
output$p3.4 <- renderPlotly({
fig2 = plot_ly(sem_df175(), x = ~ability, y = ~SEM, mode = 'lines') %>%
layout(xaxis = list(showgrid = F),
yaxis = list(title = 'SEM', showgrid = F) %>%
add_trace(name = 'SEM',
hovertemplate = 'SEM = %{SEM}',
'</br> Lower 95% CI: , %{lowerCI}',
'</br> Upper 95% CI: , %{upperCI}'))
fig1 = plot_ly(sem_df1(), x = ~ability, y = ~total_info, mode = 'lines')
fig1 = fig1 %>%layout(title = "Test Information Function (Upper); SEM (Lower) <br> n = 175",
yaxis = list(title = 'Information'),
xaxis = list(title = "Ability")) %>%
add_trace(name = 'Test Information')
subplot(fig1, fig2, nrows = 2)
})
}
####################################################
####################################################
shinyApp(ui = ui, server = server)
library(tidyverse)
df <- tibble(
a = rnorm(100, 5, 1),
b = a + rnorm(100, 0, .5)
)
df %>%
ggplot(aes(a, b)) +
geom_point()
ggsave('plot.png', dpi = 300, height = 5, width = 5, unit = 'in')
1500/5
ggsave('plot.png', dpi = 300, height = 6, width = 6, unit = 'in')
library(brms)
warnings()
install.packages('brms')
install.packages("brms")
detach("package:brms", unload = TRUE)
install.packages("brms")
warnings()
library(readxl)
tufaq <- read_excel("C:/Users/alexa/Downloads/tufaq.xlsx",
col_types = c("text"))
View(tufaq)
library(dplyr)
tufaq$AQval = as.numeric(tufaq$AQ)
View(tufaq)
library(readxl)
tufaq <- read_excel("C:/Users/alexa/Downloads/tufaq.xlsx",
col_types = c("text"))
View(tufaq)
tufaq$AQval = as.numeric(tufaq$AQ)
summary(tufaq)
load("C:/Users/alexa/Dropbox/TUF Meta Analysis/Quique and Swiderski working R  document/ModelOutput.RData")
View(cate)
data %>% summaraize()
data %>% summarize()
odds = ln(.37)
odds = exp(.37)
odds / 1 + odds
odds = exp(.04)
odds / 1 + odds
odds / (1 + odds)
odds
setwd("C:/Users/alexa/Dropbox")
library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
library(plotly)
###############data#################
#read data
library(readxl)
#mac
#hinydata <- read_excel("~/Dropbox/shinydata.xlsx")
#pc
shinydata <- read_excel("shinydata.xlsx")
data = shinydata
#create random number to randomize number of draws shown later on
set.seed(8675309)
shinydata$randomize = sample(seq(1,175, length.out = 175))
#MAKE VECTOR OF ABILITY
ability = seq(-4,4, length.out = 100)
#expand grid
item = shinydata$Item
df = expand.grid(ability, item)
library(dplyr)
runApp('Fergadiotis et al 2021 IRT ap_GF_AS.R')
shiny::runGitHub("rbcavanaugh/pnt")
remotes::install_github("rbcavanaugh/pnt")
remotes::install_github("rbcavanaugh/pnt")
library(pnt)
remove.packages("pnt")
remotes::install_github("rbcavanaugh/pnt")
library('pnt')
runPNT()
remotes::install_github("rbcavanaugh/pnt")
library(pnt)
runPNT()
library(DiagrammeR)
library(tidyverse)
spending = data.frame(
amt_spent = rnorm(n = 50, mean = 100, sd = 15)
)
spending = data.frame(
amt_spent = rnorm(n = 50, mean = 100, sd = 15),
gdp = rnorm(n = 50, mean = 500, sd = 50),
inflation = rnorm(n = 50, mean = 2, sd = 1.5),
year = seq(0:49)
)
View(spending)
spending = data.frame(
amt_spent = rnorm(n = 50, mean = 100, sd = 15),
gdp = rnorm(n = 50, mean = 500, sd = 50),
inflation = rnorm(n = 50, mean = 2, sd = 1.5),
year = as.factor(seq(0:49))
)
model1 = lm(amt_spent ~ gdp + inflation + year, data = spending)
summary(model1)
library(readr)
nba_teams <- read_csv("C:/Users/alexa/Downloads/nba_teams.csv")
View(nba_teams)
library(stargazer)
stargazer(data.frame(nba_teams), type = "text")
View(nba_teams)
library(dplyr)
Bulls <- nba_teams%>%
filter(team == "CHI")
#Filter out every team that does equal CHI
Other <- nba_teams%>%
filter(team != "CHI")
plot(Bulls$attendance, Bulls$w, col = "blue", pch = 20, xlab = "Attendance",
ylab = "Wins", main = "Scatterplot: Attendance vs. Wins",
points(Other$attendance, Other$w, col = "red", pch = 20),
legend(x = 0.92, y = 25, c("Bulls", "Other"), col = c("blue", "red"), pch = c(20, 20)))
#Filter out every team that doesn't equal CHI
plot.new()
plot(Bulls$attendance, Bulls$w, col = "blue", pch = 20, xlab = "Attendance",
ylab = "Wins", main = "Scatterplot: Attendance vs. Wins",
points(Other$attendance, Other$w, col = "red", pch = 20),
legend(x = 0.92, y = 25, c("Bulls", "Other"), col = c("blue", "red"), pch = c(20, 20)))
nba <- nba_teams%>%
filter(year < 2019)%>%
#Removed all years greater than 2019
mutate(lockout = ifelse(year == 1999, 1,
#Utilized the mutate function to create a new variable named "lockout"
#ifelse statement says that if the year equals 1999, label lockout = 1, if the column does not equal 1, utilized the next ifelse statement which if year equals 2012, label 1 and everything else 0
ifelse(year == 2012, 1, 0)))
nba$attendance <- nba$attendance/1000
nba$attendance_pergame <- nba$attendance/nba$games
Bulls <- nba%>%
filter(team == "CHI")
#Filter out every team that does equal CHI
Other <- nbas%>%
filter(team != "CHI")
#Filter out every team that doesn't equal CHI
plot.new()
plot(Bulls$attendance, Bulls$w, col = "blue", pch = 20, xlab = "Attendance",
ylab = "Wins", main = "Scatterplot: Attendance vs. Wins",
points(Other$attendance, Other$w, col = "red", pch = 20),
legend(x = 0.92, y = 25, c("Bulls", "Other"), col = c("blue", "red"), pch = c(20, 20)))
plot(Bulls$attendance, Bulls$w, col = "blue", pch = 20, xlab = "Attendance",
ylab = "Wins", main = "Scatterplot: Attendance vs. Wins",
points(Other$attendance, Other$w, col = "red", pch = 20))
#Filter out every team that does equal CHI
Other <- nbas%>%
filter(team != "CHI")
#Filter out every team that doesn't equal CHI
plot.new()
plot(Bulls$attendance, Bulls$w, col = "blue", pch = 20, xlab = "Attendance",
ylab = "Wins", main = "Scatterplot: Attendance vs. Wins",
points(Other$attendance, Other$w, col = "red", pch = 20))
#Filter out every team that doesn't equal CHI
plot.new()
plot(Bulls$attendance, Bulls$w, col = "blue", pch = 20, xlab = "Attendance",
ylab = "Wins", main = "Scatterplot: Attendance vs. Wins")
points(Other$attendance, Other$w, col = "red", pch = 20))
points(Other$attendance, Other$w, col = "red", pch = 20)
plot(Bulls$attendance, Bulls$w, col = "blue", pch = 20, xlab = "Attendance",
ylab = "Wins", main = "Scatterplot: Attendance vs. Wins")
points(Other$attendance, Other$w, col = "red", pch = 20)
plot(Bulls$attendance, Bulls$w, col = "blue", pch = 20, xlab = "Attendance",
ylab = "Wins", main = "Scatterplot: Attendance vs. Wins")
points(Other$attendance, Other$w, col = "red", pch = 20)
plot(Bulls$attendance, Bulls$w, col = "blue", pch = 20, xlab = "Attendance",
ylab = "Wins", main = "Scatterplot: Attendance vs. Wins")
points(Other$attendance, Other$w, col = "red", pch = 20)
#Filter out every team that does equal CHI
Other <- nba %>%
filter(team != "CHI")
#Filter out every team that doesn't equal CHI
plot.new()
plot(Bulls$attendance, Bulls$w, col = "blue", pch = 20, xlab = "Attendance",
ylab = "Wins", main = "Scatterplot: Attendance vs. Wins",
points(Other$attendance, Other$w, col = "red", pch = 20))
Other <- nba %>%
filter(team != "CHI")
#Filter out every team that doesn't equal CHI
plot.new()
plot(Bulls$attendance, Bulls$w, col = "blue", pch = 20, xlab = "Attendance",
ylab = "Wins", main = "Scatterplot: Attendance vs. Wins",
points(Other$attendance, Other$w, col = "red", pch = 20))
plot(Bulls$attendance, Bulls$w, col = "blue", pch = 20, xlab = "Attendance",
ylab = "Wins", main = "Scatterplot: Attendance vs. Wins")
points(Other$attendance, Other$w, col = "red", pch = 20)
plot(Other$attendance, Other$w, col = "red", pch = 20)
points(Bulls$attendance, Bulls$w, col = "blue", pch = 20, xlab = "Attendance",
ylab = "Wins", main = "Scatterplot: Attendance vs. Wins")
#Filter out every team that doesn't equal CHI
plot.new()
plot(Bulls$attendance, Bulls$w, col = "blue", pch = 20, xlab = "Attendance",
ylab = "Wins", main = "Scatterplot: Attendance vs. Wins")
plot(Other$attendance, Other$w, col = "red", pch = 20)
plot(Bulls$attendance, Bulls$w, col = "blue", pch = 20, xlab = "Attendance",
ylab = "Wins", main = "Scatterplot: Attendance vs. Wins")
points(Other$attendance, Other$w, col = "red", pch = 20)
load("C:/Users/alexa/Downloads/nba_teams.csv")
library(readr)
nba_teams <- read_csv("C:/Users/alexa/Downloads/nba_teams.csv")
View(nba_teams)
library(stargazer)
library(dplyr)
nba <- nba_teams%>%
filter(year < 2019)%>%
#Removed all years greater than 2019
mutate(lockout = ifelse(year == 1999, 1,
#Utilized the mutate function to create a new variable named "lockout"
#ifelse statement says that if the year equals 1999, label lockout = 1, if the column does not equal 1, utilized the next ifelse statement which if year equals 2012, label 1 and everything else 0
ifelse(year == 2012, 1, 0)))
nba$attendance <- nba$attendance/1000
nba$attendance_pergame <- nba$attendance/nba$games
Bulls <- nba%>%
filter(team == "CHI")
#Filter out every team that does equal CHI
Other <- nba %>%
filter(team != "CHI")
plot(Bulls$attendance, Bulls$w, col = "blue", pch = 20, xlab = "Attendance",
ylab = "Wins", main = "Scatterplot: Attendance vs. Wins")
points(Other$attendance, Other$w, col = "red", pch = 20)
legend(x = 0.92, y = 25, c("Bulls", "Other"), col = c("blue", "red"), pch = c(20, 20)))
legend(x = 0.92, y = 25, c("Bulls", "Other"), col = c("blue", "red"), pch = c(20, 20))
plot.new()
y1999 <- nba%>%
filter(year == 1999)
#Filter out every year that does equal 1999
y2012 <- nba%>%
filter(year == 2012)
#Filter out every year that does equal 2012
yOther <- nba%>%
filter(year != 1999)%>%
filter(year != 2012)
#Filter out every year that doesn't equal 1999
plot.new()
plot(y1999$attendance, y1999$w, col = "blue", pch = 15,
points(y2012$attendance, y2012$w, col = "red", pch = 16))
points(yOther$attendance, yOther$w, col = "green", pch = 17)
legend(x = 0.25, y = 35, c("1999", "2012", "Other"), col = c("blue", "red", "green"), pch = c(15, 16, 17))
legend(x = 250, y = 35, c("1999", "2012", "Other"), col = c("blue", "red", "green"), pch = c(15, 16, 17))
plot(Bulls$w, Bulls$attendance)
cor(Bulls$w, Bulls$attendance)
cor.test(Bulls$w, Bulls$attendance)
library(readr)
operas_1781_1820 <- read_csv("C:/Users/alexa/Downloads/operas_1781-1820.csv")
View(operas_1781_1820)
View(operas_1781_1820)
italy = operas_1781_1820
unique(italy$copyright)
View(italy)
library(stargazer)
??tabulate
??tabulation
tabulate(italy$copyright)
unique(italy$state)
aggregate(italy,
by = list(state, copyright))
aggregate(italy,
by = list(state, copyright),
FUN = count)
aggregate(italy,
by = list(italy$state, italy$copyright),
FUN = count)
??count
library(plyr)
aggregate(italy,
by = list(italy$state, italy$copyright),
FUN = count)
italy %>%
group_by(state) %>%
count(copyright)
library(dplyr)
italy %>%
group_by(state) %>%
count(copyright)
View(italy)
italy %>%
filter(state == "lombary" | "venetia")
italy %>%
filter(state == "lombardy" | "venetia")
italy %>%
filter(state == "lombardy")
italy %>%
filter(state == "lombardy" | state == "venetia")
italy2 = italy %>%
filter(state == "lombardy" | state == "venetia")
italy3 = italy %>%
filter(state != "lombardy" | state != "venetia")
View(italy3)
data = aggregate(italy2)
data = aggregate(italy2,
FUN = mean)
data = aggregate(italy2,
FUN = mean,
by = year)
data = aggregate(italy2,
FUN = mean,
by = "year")
data = aggregate(italy2,
FUN = mean,
by = list("year"))
data = aggregate(italy2,
FUN = mean,
by = list(italy2$year))
View(data)
View(data)
View(italy)
View(data)
lm(data = data, operas ~ copyright * post1801)
mod = lm(data = data, operas ~ copyright * post1801)
summary(mod)
View(data)
View(italy2)
mod = lm(data = data, operas ~ copyright * post1801)
View(data)
mod = lm(data = italy2, operas ~ copyright * post1801)
summary(mod)
data2 = italy %>%
group_by(state, year) %>%
summarize(avg_opera = mean(opera))
data2 = italy %>%
group_by(state, year) %>%
summarize(avg_opera = mean(operas))
View(data2)
data2 = italy %>%
group_by(year, state) %>%
summarize(avg_opera = mean(operas))
View(data2)
data2 = italy %>%
group_by(year, state) %>%
summarize(mean(operas))
View(data2)
data2 = italy %>%
group_by(state) %>%
summarize(mean(operas))
View(data2)
data2 = italy %>%
group_by(state) %>%
summarize(mean_op = mean(operas))
data2 = italy %>%
group_by(state) %>%
summarize(mean_op = mean(operas)) %>%
ungroup()
View(data2)
mutate(avg_op = summarize(mean_op = mean(operas))
data2 = italy %>%
group_by(state) %>%
mutate(avg_op = summarize(mean_op = mean(operas)))
data2 = italy %>%
group_by("state") %>%
mutate(avg_op = summarize(mean_op = mean(operas)))
data2 = italy %>%
mutate(lv = ifelse(state == "lombardy", 1,
ifelse(state == "venetia", 1, 0)))
data3 = aggregate(data2,
FUN = mean,
by = (list(data2$year, data2$copyright, data2$lv)))
View(data3)
Model1 <- lm(data = data, operas~copyright + post1801 + lv + copyright*post1801)
Model1 <- lm(data = data3, operas~copyright + post1801 + lv + copyright*post1801)
summary(Model1)
Model1 <- lm(data = data3, operas~copyright + post1801 + as.factor(lv) + copyright*post1801)
summary(Model1)
unique(data3$lv)
data2 = italy %>%
mutate(lv = ifelse(state == "lombardy", 1,
ifelse(state == "venetia", 1, 0)))
data3 = aggregate(data2,
FUN = mean,
by = (list(data2$year, data2$copyright, data2$lv)))
Model1 <- lm(data = data3, operas~copyright + post1801 + as.factor(lv) + copyright*post1801)
summary(Model1)
Model1 <- lm(data = data2, operas~copyright + post1801 + state + copyright*post1801)
summary(Model1)
View(italy2)
data2 = italy %>%
mutate(lv = ifelse(state == "lombardy", 1,
ifelse(state == "venetia", 1, 0))) %>%
group_by(year) %>%
summary(avg_op = mean(operas))
data2 = italy %>%
mutate(lv = ifelse(state == "lombardy", 1,
ifelse(state == "venetia", 1, 0))) %>%
group_by(year) %>%
summary(avg_op = mean(operas))
italy = operas_1781_1820
data2 = italy %>%
mutate(lv = ifelse(state == "lombardy", 1,
ifelse(state == "venetia", 1, 0))) %>%
group_by(year) %>%
summary(avg_op = mean(operas))
data2 = italy %>%
mutate(lv = ifelse(state == "lombardy", 1,
ifelse(state == "venetia", 1, 0))) %>%
group_by(year) %>%
data3 = aggregate(data2,
FUN = mean,
by = (list(data2$year, data2$copyright, data2$lv)))
data2 = italy %>%
mutate(lv = ifelse(state == "lombardy", 1,
ifelse(state == "venetia", 1, 0))) %>%
group_by(year)
data3 = aggregate(data2,
FUN = mean,
by = (list(data2$year, data2$copyright, data2$lv)))
View(data3)
data3 = aggregate(data2,
FUN = mean,
by = (list(data2$year, data2$copyright, data2$lv, data2$state)))
View(data3)
View(data3)
View(italy)
knitr::opts_chunk$set(echo = TRUE)
#to load data
library(readxl)
library(readr)
#to manipulate data, dplyr, purr, etc and to plot w ggplot2
library(tidyverse)
#Plot tree structure
library(data.tree)
#Frequentist multilevel models
library(lme4)
#Bayesian multilevel models
library(brms)
#pretty plots
library(sjPlot)
my_files = list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv)
setwd("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
my_files = list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files,read.csv)
all_csv <- lapply(my_files, read.csv)
my_files = list.files("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files, read.csv)
setwd("~/GitHub/DR2/Specific aim 2/Academy of Aphasia/data")
#Further arguments to read.csv can be passed in ...
all_csv <- lapply(my_files, read.csv)
